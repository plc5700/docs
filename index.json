[
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Basics Discover what PrestaShop is all about and the core concepts behind it.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/creation/",
	"title": "Creating a first module",
	"tags": [],
	"description": "",
	"content": " Creating a first module Before you start writing code for your PrestaShop module, you should be aware that the PrestaShop team uses a specific set of coding convention (or coding standards, coding norm, etc.).\nAs Wikipedia puts it, \u0026ldquo;Coding conventions are a set of guidelines for a specific programming language that recommend programming style, practices and methods for each aspect of a piece program written in this language\u0026rdquo;, and \u0026ldquo;Good procedures, good methodology and good coding standards can be used to drive a project such that the quality is maximized and the overall development time and development and maintenance cost is minimized.\u0026rdquo; (See http://en.wikipedia.org/wiki/Coding_conventions).\nPrestaShop\u0026rsquo;s own standards is available at this page: http://doc.prestashop.com/display/PS16/Coding+Standards. You should read it in order to make sure that the code you produce fits correctly with the overall code of the PrestaShop project. The PHPCodeSniffer can help you make sure you follow the standard properly.\n Let\u0026rsquo;s create a simple first module; this will enable us to better describe its structure. We will name it \u0026ldquo;My module\u0026rdquo;.\nFirst, create the module\u0026rsquo;s folder, in the /modules folder. It should have the same name as the module, with no space, only alphanumerical characters, the hyphen and the underscore, all in lowercase: /mymodule.\nThis folder must contain the main file, a PHP file of the same name as the folder, which will handle most of the processing: mymodule.php.\nThat is enough for a very basic module, but obviously more files and folders can be added later.\nThe constant test The main mymodule.php file must start with the following test:\n\u0026lt;?php if (!defined('_PS_VERSION_')) { exit; }  This checks for the existence of an always-existing PrestaShop constant (its version number), and if it does not exist, it stops the module from loading. The sole purpose of this is to prevent malicious visitors to load this file directly.\nNote that, as required by the PrestaShop Coding Standards (see above), we do not use a PHP closing tag.\nThe main class The main file must contain the module\u0026rsquo;s main class (along with other classes if needed). PrestaShop uses Object-Oriented programming, and so do its modules.\nThat class must bear the same name as the module and its folder, in CamelCase (see http://en.wikipedia.org/wiki/CamelCase). In our example: MyModule. Furthermore, that class must extend the Module class, in order to inherit all its methods and attributes.\n\u0026lt;?php if (!defined('_PS_VERSION_')) { exit; } class MyModule extends Module { }  It can just as well extend any class derived from Module, for specific needs: PaymentModule, ModuleGridEngine, ModuleGraph, etc.\nAt this stage, if you place the module\u0026rsquo;s folder on the /modules folder, the module can already be seen in the \u0026ldquo;Modules\u0026rdquo; page in the back office, in the \u0026ldquo;Other modules\u0026rdquo; section – albeit with no real name nor thumbnail.\nThe constructor method Now, let\u0026rsquo;s fill the class\u0026rsquo; code block with the essential constructor lines. A constructor is a function in a class that is automatically called when you create a new instance of a class with new. In the case of a PrestaShop, the constructor class is the first method to be called when the module is loaded by PrestaShop. This is therefore the best place to set most of its details.\n\u0026lt;?php if (!defined('_PS_VERSION_')) { exit; } class MyModule extends Module { public function __construct() { $this-\u0026gt;name = 'mymodule'; $this-\u0026gt;tab = 'front_office_features'; $this-\u0026gt;version = '1.0.0'; $this-\u0026gt;author = 'Firstname Lastname'; $this-\u0026gt;need_instance = 0; $this-\u0026gt;ps_versions_compliancy = array('min' =\u0026gt; '1.6', 'max' =\u0026gt; _PS_VERSION_); $this-\u0026gt;bootstrap = true; parent::__construct(); $this-\u0026gt;displayName = $this-\u0026gt;l('My module'); $this-\u0026gt;description = $this-\u0026gt;l('Description of my module.'); $this-\u0026gt;confirmUninstall = $this-\u0026gt;l('Are you sure you want to uninstall?'); if (!Configuration::get('MYMODULE_NAME')) $this-\u0026gt;warning = $this-\u0026gt;l('No name provided'); } }  Let\u0026rsquo;s examine each line from this first version of the MyModule class\u0026hellip;\npublic function __construct() This line defines the class' constructor function. $this-\u0026gt;name = 'mymodule'; $this-\u0026gt;tab = 'front_office_features'; $this-\u0026gt;version = '1.0'; $this-\u0026gt;author = 'Firstname Lastname';  This section assigns a handful of attributes to the class instance (this):\n \u0026lsquo;name\u0026rsquo; attribute. This attributes serves as an internal identifier. The value MUST be the name of the module\u0026rsquo;s folder. Do not use special characters or spaces, and keep it lower-case. \u0026lsquo;tab\u0026rsquo; attribute. The title for the section that shall contain this module in PrestaShop\u0026rsquo;s back office modules list. You may use an existing name, such as seo, front_office_features or analytics_stats, or a custom one. In this last case, a new section will be created with your identifier. We chose \u0026ldquo;front_office_features\u0026rdquo; because this first module will mostly have an impact on the front-end. \u0026lsquo;version\u0026rsquo; attribute. The version number for the module, displayed in the modules list. It is a string, so that you may use such variation as \u0026ldquo;1.0b\u0026rdquo;, \u0026ldquo;3.07 beta 3\u0026rdquo; or \u0026ldquo;0.94 (not for production use)\u0026rdquo;. \u0026lsquo;author\u0026rsquo; attribute. This is displayed as-is in the PrestaShop modules list.  Here is the list of available \u0026ldquo;Tab\u0026rdquo; attributes, and their corresponding section in the \u0026ldquo;Modules\u0026rdquo; page:\n   \u0026ldquo;Tab\u0026rdquo; attribute Module section     administration Administration   advertising_marketing Advertising \u0026amp; Marketing   analytics_stats Analytics \u0026amp; Stats   billing_invoicing Billing \u0026amp; Invoices   checkout Checkout   content_management Content Management   dashboard Dashboard   emailing E-mailing   export Export   front_office_features Front Office Features   i18n_localization I18n \u0026amp; Localization   market_place Market Place   merchandizing Merchandizing   migration_tools Migration Tools   mobile Mobile   others Other Modules   payments_gateways Payments \u0026amp; Gateways   payment_security Payment Security   pricing_promotion Pricing \u0026amp; Promotion   quick_bulk_update Quick / Bulk update   search_filter Search \u0026amp; Filter   seo SEO   shipping_logistics Shipping \u0026amp; Logistics   slideshows Slideshows   smart_shopping Smart Shopping   social_networks Social Networks    Let\u0026rsquo;s continue with the next line in this block of code:\n$this-\u0026gt;need_instance = 0; $this-\u0026gt;ps_versions_compliancy = array('min' =\u0026gt; '1.5', 'max' =\u0026gt; '1.6'); $this-\u0026gt;bootstrap = true;  This section handles the relationship with the module and its environment (namely, PrestaShop):\n need_instance. Indicates whether to load the module\u0026rsquo;s class when displaying the \u0026ldquo;Modules\u0026rdquo; page in the back office. If set at 0, the module will not be loaded, and therefore will spend less resources to generate the \u0026ldquo;Modules\u0026rdquo; page. If your module needs to display a warning message in the \u0026ldquo;Modules\u0026rdquo; page, then you must set this attribute to 1. ps_versions_compliancy. Indicates which version of PrestaShop this module is compatible with. In the example above, we explicitly write that this module will only work with PrestaShop 1.5.x, and no other major version. bootstrap. Indicates that the module\u0026rsquo;s template files have been built with PrestaShop 1.6\u0026rsquo;s bootstrap tools in mind – and therefore, that PrestaShop should not try to wrap the template code for the configuration screen (if there is one) with helper tags.  Next, we call the constructor method from the parent PHP class:\nparent::__construct();  This will trigger a lot of actions from PrestaShop that you do not need to know about at this point. Calling the parent constuctor method must be done after the creation of the this-\u0026gt;name variable and before any use of the this-\u0026gt;l() translation method.\nThe next section deals with text strings, which are encapsulated in PrestaShop\u0026rsquo;s translation method, l():\n$this-\u0026gt;displayName = $this-\u0026gt;l('My module'); $this-\u0026gt;description = $this-\u0026gt;l('Description of my module.'); $this-\u0026gt;confirmUninstall = $this-\u0026gt;l('Are you sure you want to uninstall?'); if (!Configuration::get('MYMODULE_NAME')) $this-\u0026gt;warning = $this-\u0026gt;l('No name provided.');  These lines respectively assign:\n A name for the module, which will be displayed in the back office\u0026rsquo;s modules list. A description for the module, which will be displayed in the back office\u0026rsquo;s modules list. A message, asking the administrator if he really does want to uninstall the module. To be used in the installation code. A warning that the module doesn\u0026rsquo;t have its MYMODULE_NAME database value set yet (this last point being specific to our example, as we will see later).  The constructor method is now complete. You are free to add more to it later if necessary, but this the bare minimum for a working module.\nNow go to your back office, in the Modules page: the module is visible in the modules list, with its information displayed – and no icon for now.\nYou can install the module, but it does not do anything yet.\nWhen you click on the \u0026ldquo;Install\u0026rdquo; button for your module, it will display a module window saying that your module is Untrusted.\nThe only way to make your module Trusted is to distribute it through the PrestaShop Addons marketplace (with a unique identifying key), or to become a PrestaShop partner. Other trusted modules are the native ones.\nTo install the module, click the \u0026ldquo;Proceed with installation\u0026rdquo; on this screen.\nBuilding the install() and uninstall() methods Some modules have more needs than just using PrestaShop\u0026rsquo;s features in special ways. Your module might need to perform actions on installation, such as checking PrestaShop\u0026rsquo;s settings or to registering its own settings in the database. Likewise, if you changed things in the database on installation, it is highly recommended to change them back (or remove them) when uninstalling the module.\nThe install() and uninstall() methods make it possible to control what happens when the store administrator installs or uninstalls the module. They must be included in the main class\u0026rsquo; block of code (in our example, the MyModule class) – at the same level as the constructor method.\nThe install() method Here is the bare minimum for the install() method:\npublic function install() { if (!parent::install()) return false; return true; }  In this first and extremely simplistic incarnation, this method does the minimum needed: return true returned by the Module class\u0026rsquo; install() method, which returns either true if the module is correctly installed, or false otherwise. As it is, if we had not created that method, the superclass\u0026rsquo; method would have been called instead anyway, making the end result identical. Nevertheless, we must mention this method, because it will be very useful once we have to perform checks and actions during the module\u0026rsquo;s installation process: creating SQL tables, copying files, creation configuration variables, etc.\nSo for example how you can expand the install() method to perform installation checks. In the following example, we perform the following tasks during installation:\n Check that the Multistore feature is enabled, and if so, set the current context to all shops on this installation of PrestaShop. Check that the module parent class is installed. Check that the module can be attached to the leftColumn hook. Check that the module can be attached to the header hook. Create the MYMODULE_NAME configuration setting, setting its value to \u0026ldquo;my friend\u0026rdquo;.  public function install() { if (Shop::isFeatureActive()) Shop::setContext(Shop::CONTEXT_ALL); if (!parent::install() || !$this-\u0026gt;registerHook('leftColumn') || !$this-\u0026gt;registerHook('header') || !Configuration::updateValue('MYMODULE_NAME', 'my friend') ) return false; return true; }  If any of the lines in the testing block fails, the method returns false and the installation does not happen.\nThe uninstall() method Here is the bare minimum for the uninstall() method:\npublic function uninstall() { if (!parent::uninstall()) return false; return true; }  Building on this foundation, we want an uninstall() method that would delete the data added to the database during the installation ( MYMODULE_NAME configuration setting). This method would look like this:\npublic function uninstall() { if (!parent::uninstall() || !Configuration::deleteByName('MYMODULE_NAME') ) return false; return true; }  The Configuration object As you can see, our three blocks of code (__construct(), install() and uninstall()) all make use of a new object, Configuration.\nThis is a PrestaShop-specific object, built to help developers manage their module settings. It stores these settings in PrestaShop\u0026rsquo;s database without require to use SQL queries. Specifically, this object handles data from the ps_configuration database table.\nThe main methods So far, we\u0026rsquo;ve used three methods, to which we\u0026rsquo;ll add a fourth one in the list below:\n Configuration::get('myVariable'): retrieves a specific value from the database. Configuration::getMultiple(array('myFirstVariable', 'mySecondVariable', 'myThirdVariable')): retrieves several values from the database, and returns a PHP array. Configuration::updateValue('myVariable', $value): updates an existing database variable with a new value. If the variable does not yet exist, it creates it with that value. Configuration::deleteByName('myVariable'): deletes the database variable.  There are many more, such as getInt() or hasContext(), but these four are the ones you will use the most.\nNote that when using updateValue(), the content of \\$value can be anything, be it a string, a number, a serialized PHP array or a JSON object. As long as you properly code the data handling function, anything goes. For instance, here is how to handle a PHP array using the Configuration object:\n// Storing a serialized array. Configuration::updateValue('MYMODULE_SETTINGS', serialize(array(true, true, false))); // Retrieving the array. $configuration_array = unserialize(Configuration::get('MYMODULE_SETTINGS'));  As you can see, this in a very useful and easy-to-use object, and you will certainly use it in many situations. Most native modules use it too for their own settings.\nHandling the Multistore feature By default, all these methods work within the confines of the current store context, whether PrestaShop is using the multistore feature or not.\nHowever, it is possible to work outside of the current context and impact other known stores. This is done using three optional parameters, which are not presented in the list above:\n id_lang: enables you to force the language with which you want to work. id_shop_group: enables you to indicate the shop group of the target store. id_shop: enables you to indicate the id of the target store.  By default, these three parameters use the values of the current context, but you can use them to target other stores.\nNote that it is not recommended to change the default values of these variables, even more so if the module you are writing is to be used on other stores than your own. They should only be used if the module is for your own store, and you know the id and shop group of all of your shops.\nRetrieving external values from the ps_configuration data table You are not limited to your own variables: PrestaShop stores all its own configuration settings in the ps_configuration table. There are literally hundreds of settings, and you can access them just as easily as you would access your own. For instance:\n Configuration::get('PS_LANG_DEFAULT'): retrieves the ID for the default language. Configuration::get('PS_TIMEZONE'): retrieves the name of the current timezone, in standard TZ format (see: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones). Configuration::get('PS_DISTANCE_UNIT'): retrieves the default distance unit (\u0026ldquo;km\u0026rdquo; for kilometers, etc.). Configuration::get('PS_SHOP_EMAIL'): retrieves the main contact e-mail address. Configuration::get('PS_NB_DAYS_NEW_PRODUCT'): retrieves the number of days during which a newly-added product is considered \u0026ldquo;New\u0026rdquo; by PrestaShop.  Dive into the ps_configuration table in order to discover many other settings!\nThe Shop object Another of install()\u0026rsquo;s lines is thus:\nif (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); }  As said earlier, here we check that the Multistore feature is enabled, and if so, set the current context to all shops on this installation of PrestaShop.\nThe Shop object helps you manage the multistore feature. We will not dive in the specifics here, but will simply present the two methods that are used in this sample code:\n Shop::isFeatureActive(): This simply checks whether the multistore feature is active or not, and if at least two stores are presently activated. Shop::setContext(Shop::CONTEXT_ALL): This changes the context in order to apply coming changes to all existing stores instead of only the current store.  The Context is explained in more details in the \u0026ldquo;Using the Context Object\u0026rdquo; chapter of this Developer Guide.\nThe icon file To put the finishing touch to this basic module, you should add an icon, which will be displayed next to the module\u0026rsquo;s name in the back office modules list. In case your module is made for a prominent service, having that service\u0026rsquo;s logo visible brings trust. Make sure you do not use a logo already used by one of the native modules, or without authorization from the owner of the logo/service.\nThe icon file must respect these requirements:\n It must be placed on the module\u0026rsquo;s main folder. 32*32 PNG image. Named logo.png. Tip: There are many free 32*32 icon libraries available. Here are a few: http://www.fatcow.com/free-icons (very close to the FamFamFam one) or http://www.iconarchive.com/show/danish-royalty-free-icons-by-jonas-rask.html (Danish Royalty Free)  Installing the module Now that all basics are in place, reload the back office\u0026rsquo;s \u0026ldquo;Modules\u0026rdquo; pages, in the \u0026ldquo;Front office features\u0026rdquo; section, you should find your module. Install it (or reset it if it is already installed).\nDuring the module\u0026rsquo;s installation, PrestaShop automatically creates a small config.xml file in the module\u0026rsquo;s folder, which stores the configuration information. You should be very careful when editing by hand.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/guidelines/",
	"title": "Guidelines and coding standards",
	"tags": [],
	"description": "",
	"content": " Guidelines and coding standards Compatibility PHP Code Your PHP code should be compatible with the following versions:\n PrestaShop 1.7.0  ~ 1.7.3  : at least PHP 5.4 PrestaShop 1.7.4  : at least PHP 5.6  HTML / CSS / Javascript Your HTML/CSS/JS code should work with at least:\n IE9+ Edge Firefox 45 Chrome 29.  Mobile-wise:\n iOS 8.4 Android Browser 4.4  Standards General Use spaces for indentation in every language (PHP, HTML, CSS, etc.):\n4 spaces for PHP files, 2 spaces for all other file types.\nUse our .editorconfig file in order to easily configure your editor: https://github.com/PrestaShop/PrestaShop/blob/develop/.editorconfig\nPHP files You should follow the PSR-2 standard, just like PrestaShop does.\nIn general, we tend to follow the Symfony coding standards.\nHTML files Use HTML 5 tags:\n \u0026lt;br /\u0026gt; → \u0026lt;br\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;section\u0026gt; etc.  All open tags must be closed in the same file (a \u0026lt;div\u0026gt; should not be opened in header.tpl then closed in footer.tpl). Subtemplates (templates meant to be included in another template) must reside inside a /_partials/ folder.\nCSS files Use CSS3.\nWe recommend that you follow the RSCSS structure\nJavascript Make sure your linter tool follows our .eslint file: https://github.com/PrestaShop/PrestaShop/blob/develop/.eslintrc\nIf you wish to write ECMAScript 2015 (ES6) code, we recommend using the Babel compiler to maximize compatibility.\nA good JS practice consists in splitting files per use, and then compiling them into one.\nLearn more about the ES2015 standard: https://babeljs.io/docs/learn-es2015/\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": " Hooks Hooks are a way to associate your code to some specific PrestaShop events.\nMost of the time, they are used to insert content in a page.\nFor instance, the PrestaShop default theme\u0026rsquo;s home page has the following hooks:\n   Hook name Description     displayHeader Displays content in the page\u0026rsquo;s header area.   displayTop Displays content in the page\u0026rsquo;s top area.   displayLeftColumn Displays content in the page\u0026rsquo;s left column.   displayHome Displays content in the page\u0026rsquo;s central area.   displayRightColumn Displays content in the page\u0026rsquo;s right column.   displayFooter Displays content in the page\u0026rsquo;s footer area.    Hooks can also be used to perform specific actions under certain circumstances (i.e. sending an e-mail to the client).\nNaming scheme Hook names are prefixed with \u0026ldquo;action\u0026rdquo; or \u0026ldquo;display\u0026rdquo;. This prefix indicates if a hook is triggered by an event or if it\u0026rsquo;s used to display content:\n action\u0026lt;Something\u0026gt; Triggered by specific events that take place in PrestaShop. display\u0026lt;Something\u0026gt; Result in something being displayed, either in the front-end or the back-end.  Using hooks In a controller It is easy to call a hook from within a controller: you simply have to use its name with the hookExec() method: Module::hookExec('NameOfHook');\nFor instance:\n$this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( 'HOOK_LEFT_COLUMN', Module::hookExec('displayLeftColumn') );  In a module In order to attach your code to a hook, you must create a non-static public method, starting with the \u0026ldquo;hook\u0026rdquo; keyword followed by either \u0026ldquo;display\u0026rdquo; or \u0026ldquo;action\u0026rdquo;, and the name of the hook you want to use.\nThis method receives one (and only one) argument: an array of the contextual information sent to the hook.\npublic function hookDisplayNameOfHook($params) { // Your code. }  In order for a module to respond to a hook call, the hook must be registered within PrestaShop. Hook registration is done using the registerHook() method. Registration is usually done during the module\u0026rsquo;s installation.\nIn a theme It is easy to call a hook from within a template file (.tpl): you simply have to use its name with the hook function. You can add the name of a module that you want the hook execute.\nFor instance:\n{hook h='displayLeftColumn' mod='blockcart'}  Creating your own hook You can create new PrestaShop hooks by adding a new record in the ps_hook table in your MySQL database. You could do it the hard way:\nINSERT INTO `ps_hook` (`name`, `title`, `description`) VALUES ('nameOfHook', 'The name of your hook', 'This is a custom hook!');  \u0026hellip;but PrestaShop enables you to do it the easy way:\n$this-\u0026gt;registerHook('NameOfHook');  If the hook \u0026ldquo;NameOfHook\u0026rdquo; doesn\u0026rsquo;t exist, PrestaShop will create it for you. No need to do the SQL query anymore.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/templating/",
	"title": "How to override templates in modern Back Office modern pages?",
	"tags": [],
	"description": "",
	"content": " How to override templates in modern Back Office modern pages? Since v1.7 of PrestaShop, back office is progressively migrated to Symfony framework. If we are not allowed to override a complete controller like we could do before (even if it was highly discouraged), we have introduced so many powerful and efficient ways to customize the Back Office.\nTogether, let\u0026rsquo;s see how we can improve the shops.\nOverride the templates Since PrestaShop 1.7, the new views are using Twig instead of Smarty as main templating engine. Twig is very popular in PHP world, well documented and one of the most performants.\nLet\u0026rsquo;s say we want to improve the Product Listing page of the back office.\nOur Customer want a better Listing vieew: the \u0026ldquo;Price\u0026rdquo; column should be at position 2 and the \u0026ldquo;Reference\u0026rdquo; column to be removed. How can we do that? It\u0026rsquo;s quite simple.\nIdentify the template to override First we need to identify which Twig template(s) is (are) rendered. Using the Debug mode, select the \u0026ldquo;Twig metrics\u0026rdquo; block in the Symfony Debug toolbar. You\u0026rsquo;ll see the list of Twig templates used to render the page. In our case, we are interested by the template \u0026ldquo;@PrestaShop/Admin/Product/catalog.html.twig\u0026rdquo;.\nOverride the template in the module: a simple \u0026ldquo;Hello world!\u0026rdquo; Now we have found the right template, let\u0026rsquo;s override it inside a module. In a module called foo let\u0026rsquo;s create the related template. As the template is located inside PrestaShop/Admin/Product folder, we need to create the same path.\nSo Let\u0026rsquo;s create a file named catalog.html.twig in modules/foo/views/PrestaShop/Admin/Product folder: we could re-use the one in src/PrestaShopBundle/Resources/views/Admin/Product folder, but let\u0026rsquo;s start with a very simple override.\n{% extends '@PrestaShop/Admin/layout.html.twig' %} {% block content %} Hello world! {% endblock %}  Access the product Listing page and \u0026ldquo;voila\u0026rdquo;, we have overriden the complete page. Now we can re-use the real catalog.html.twig template and adapt it to remove \u0026ldquo;Reference\u0026rdquo; column. For instance, remove \u0026ldquo;Reference\u0026rdquo; and \u0026ldquo;Search Ref.\u0026rdquo; table headers, and we should have this view:\nWell, it\u0026rsquo;s not that good\u0026hellip; it\u0026rsquo;s because the columns are also rendered by the template list.html.twig. We must override it to remove the \u0026ldquo;Reference\u0026rdquo; column.\nLet\u0026rsquo;s create the file named list.html.twig in modules/foo/views/PrestaShop/Admin/Product folder with the content of original template located in src/PrestaShopBundle/Resources/views/Admin/Product folder.\nWe only have to remove the \u0026ldquo;Reference\u0026rdquo; row in this template and we are good.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/paiement/",
	"title": "Payment modules",
	"tags": [],
	"description": "",
	"content": " Payment modules PrestaShop 1.7 introduces a new payment API. Below, you\u0026rsquo;ll find information about how it works and also, how to migrate your module from PrestaShop 1.6 (and earlier) to PrestaShop 1.7.\nThe main reason why the change was needed is on the customer side: Now, there is only one button to validate the order, not one by payment module anymore.\nRequirements To make a payment module for PrestaShop 1.7, you\u0026rsquo;ll have to respect some elements:\n Your class will have to extend PaymentModule. You will need to declare the following namespace.\nuse PrestaShop\\PrestaShop\\Core\\Payment\\PaymentOption;  You\u0026rsquo;ll have to register the two following methods: hookPaymentOptions() \u0026amp; hookPaymentReturn() and register these hooks.\n You must not have a submit button into your module\u0026rsquo;s HTML code. It will automatically be generated by PrestaShop.\n  In the hookPaymentOptions() method, you have to return an array of PaymentOption.\nHow to generate your PaymentOption PaymentOption Here is a list of the PaymentOption class variables. They all have a getter and a setter and are accessible in the array sent to the front office template.\n $callToActionText: The text displayed as the payment method name. $additionalInformation: Additional information to display to the customer. This is free HTML, and may be used by modules such as bankwire to display to which account the bank transfer should be made. $logo: The URL to a picture to display in the payment option selection widget. $action: The URL to which the request to process the payment must be made. $inputs: An associative array of additional parameters to use when sending the request to $action. $form: The custom HTML to display like a form to enter the credit card information. $iframe: The custom HTML containing an iframe with the payment confirmation widget for modules like ATOS. $moduleName: The name of the module. $binary: A boolean to set if the module form was generated by binaries and contains a submit button. It\u0026rsquo;s necessary to adapt the behavior.  PaymentOption types You can find a example module illustrating the four identified cases of payment modules on GitHub.\nWe have identified four cases of payment module:\nOffline  This is the most simple case where you could be (e.g.:Bankwire, Cheque). It\u0026rsquo;s a simple URL to call, then various information are displayed to the customer.\nThe minimal variables to set are $callToActionText and $action. You can check the getOfflinePaymentOption() method of paymentexample to have an example.\n  External  It\u0026rsquo;s a simple URL to call, then the payment is directly processed on the Payment Service Provider\u0026rsquo;s website (e.g.: PayPal, Paybox).\nThe minimal variables to set are $callToActionText and $action. The form will be sent by POST and you can add hidden inputs such as a token, by using setInput() method. You can check the getExternalPaymentOption() method of paymentexample to have an example.\n  Embedded  You write your credit card number and all the required data directly on the merchant\u0026rsquo;s website (e.g.: Stripe).\nThe minimal variables to set are $callToActionText and $form. You can check the getEmbeddedPaymentOption() method of paymentexample to have an example.\n  Iframe  The payment form is displayed on the merchant\u0026rsquo;s website, but inside an iFrame.\nThe minimal variables to set are $callToActionText and $additionalInformation. You can check the getIframePaymentOption() method of paymentexample to have an example.\n  Migrating from 1.6 to 1.7 How-To You need to change the payment hook where your module is hooked on by paymentOption. It\u0026rsquo;s not a display hook anymore, so you must not use the $this-\u0026gt;display() method to retrieve a template, but use the $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;fetch() method instead.\nThen, implement the hookPaymentOptions() function to return an array of PaymentOption.\nNext, you\u0026rsquo;ll need to identify the type of your payment module to know which variables are mandatory.\nWhat if I can\u0026rsquo;t remove the sumbit button ? As you may read it above, you must not have a submit button into your module\u0026rsquo;s HTML code, because PrestaShop will automatically generate it. If you can\u0026rsquo;t remove the submit button from the form for some reasons (e.g.: the form is generated by binaries), we have implemented another way to make your module PrestaShp 1.7 compatible. But, note that this is NOT the recommended way to do it.\nTo do this, you\u0026rsquo;ll need to implement a supplementary hook: displayPaymentByBinaries. It\u0026rsquo;s made to display the payment form, and it will replace the unique payment button in the checkout.\nYou\u0026rsquo;ll also need to set the $binary variable to true. It will adapt the behavior to hide the payment button and replace it by the form when the payment option is selected.\nHooks The params passed to the following hooks have been modified:\n hookPaymentReturn hookDisplayOrderConfirmation  BEFORE    Key Value     total_to_pay result of $order-\u0026gt;getOrdersTotalPaid()   currency currency sign (string)   currencyObj The loaded currency (Currency class)   objOrder The current order object (Order class)    AFTER    Key Value     order The current order object (Order class)    Everything can be retrieved, for example:\n$currency = new Currency($params['order']-\u0026gt;id_currency); $total_to_pay = $params['order']-\u0026gt;getOrdersTotalPaid();  Real life example See the bankwire module for an example of how we migrated a simple 1.6 module to 1.7.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/why/",
	"title": "Why write documentation",
	"tags": [],
	"description": "",
	"content": " Why write technical documentation?  The best documentation is no documentation: code should be self-explanatory.\nAll the lazy developers in history\n Writing documentation is hard.\nWe try to find excuses and rationalize and lie to ourselves so we can feel better about with the fact that we should be doing it, but it\u0026rsquo;s \u0026ldquo;too much work\u0026rdquo;.\nHere are two good reasons to try and convince you to start writing documentation, and help you while you help others, too:\n1. You won\u0026rsquo;t remember that 6 months from now Just fixed a bug? Written a new feature? Cool! You may think you know your code now, but if you come bak to it 6 months later, you will have forgotten most about. It will be as if someone else had written it.\nWrite it down now that it\u0026rsquo;s fresh on your mind. You will be happy you did it when you come back later looking for help finding out how \u0026ldquo;this\u0026rdquo; was done and how does \u0026ldquo;that\u0026rdquo; work.\nWhich bring us to\u0026hellip;\n2. Grep is sub-optimal Why browse the sources and reverse-engineer code when you can read a paragraph that\u0026rsquo;s written for humans? It\u0026rsquo;s not efficient to read 600 lines of code and run them in your head when you could simply google it.\nRemember, code is for computers and documentation is for humans. If you are reading this, that means you\u0026rsquo;re probably a human. Optimize for your time, too.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/widgets/",
	"title": "Widgets",
	"tags": [],
	"description": "",
	"content": " Widgets The goal Widgets introduce 2 majors features for theme developer.\nUse module directly into your theme If you want to use a module, like a social sharing button module for example, and if this module is a widget for PrestaShop 1.7, you can use something like:\n\u0026lt;div class=\u0026quot;product-description\u0026quot;\u0026gt; ... \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;product-social-sharing\u0026quot;\u0026gt; {widget name=\u0026quot;socialsharing\u0026quot;} \u0026lt;/div\u0026gt;  As long as this module is installed, it will work.\nWith PrestaShop 1.6, you would have add to declare and hook and make sure the module was hooked on it. This allow you to fully control the layout of your page and display module the way you want.\nThey can be hooks on any display hook When you hook a widget on any display hook the module will execute the default method.\nIt means that you can still have different behavior for different hooks but now you can have a default behavior and make your module work on any hook.\nHow to make a Widget To make it available, your module has to implement the WidgetInterface.\nThis interface declare 2 mandatory methods: renderWidget and getWidgetVariables.\n   Method Description     getWidgetVariables This method must return all variable that you want to assign to smarty.   renderWidget Return the generated view (fetch smarty template)    $hookname is passed to each method, this will allow you to have a different behavior according to the hook.\nExample public function renderWidget($hookName = null, array $configuration = []) { if ($hookName == null \u0026amp;\u0026amp; isset($configuration['hook'])) { $hookName = $configuration['hook']; } if (preg_match('/^displayNav\\d*$/', $hookName)) { $template_file = 'nav.tpl'; } elseif ($hookName == 'displayLeftColumn') { $template_file = 'ps_contactinfo-rich.tpl'; } else { $template_file = 'ps_contactinfo.tpl'; } $this-\u0026gt;smarty-\u0026gt;assign($this-\u0026gt;getWidgetVariables($hookName, $configuration)); return $this-\u0026gt;fetch('module:'.$this-\u0026gt;name.'/'.$template_file); } public function getWidgetVariables($hookName = null, array $configuration = []) { $address = $this-\u0026gt;context-\u0026gt;shop-\u0026gt;getAddress(); $contact_infos = [ 'company' =\u0026gt; Configuration::get('PS_SHOP_NAME'), 'address' =\u0026gt; [ 'formatted' =\u0026gt; AddressFormat::generateAddress($address, array(), '\u0026lt;br /\u0026gt;'), 'address1' =\u0026gt; $address-\u0026gt;address1, 'address2' =\u0026gt; $address-\u0026gt;address2, 'postcode' =\u0026gt; $address-\u0026gt;postcode, 'city' =\u0026gt; $address-\u0026gt;city, 'state' =\u0026gt; (new State($address-\u0026gt;id_state))-\u0026gt;name[$this-\u0026gt;context-\u0026gt;language-\u0026gt;id], 'country' =\u0026gt; (new Country($address-\u0026gt;id_country))-\u0026gt;name[$this-\u0026gt;context-\u0026gt;language-\u0026gt;id], ], 'phone' =\u0026gt; Configuration::get('PS_SHOP_PHONE'), 'fax' =\u0026gt; Configuration::get('PS_SHOP_FAX'), 'email' =\u0026gt; Configuration::get('PS_SHOP_EMAIL'), ]; return [ 'contact_infos' =\u0026gt; $contact_infos, ]; }  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/coding_standards/",
	"title": "Coding standards",
	"tags": [],
	"description": "",
	"content": " Coding standards Consistency is important, even more so when writing open-source code, since the code belongs to millions of eyeballs, and bug-fixing relies on these teeming millions to actually locate bugs and understand how to solve them.\nThis is why, when writing anything for PrestaShop, be it a theme, a module or a core patch, you should strive to follow the following guidelines. They are the ones that PrestaShop\u0026rsquo;s developers adhere to, and following them is the surest way to have your code be elegantly integrated in PrestaShop.\nIn short, code consistency helps keeping the code readable and maintainable.\nGeneral conventions All files containing code MUST:\n Use only UTF-8 without BOM. Use the Unix LF (linefeed) line ending. End with a single blank line.  PHP code conventions PHP files MUST follow the PSR-2 standard alongside Symfony standards.\nAltough Yoda conditions are suggested, they are not enforced.\n Javascript code conventions Javascript files MUST follow the Airbnb Javascript style guide.\nHTML, CSS (Sass), Twig \u0026amp; Smarty code conventions HTML, CSS (Sass), Twig and Smarty files MUST follow the Mark Otto\u0026rsquo;s coding standards. Mark is the creator of the Bootstrap framework.\nLicense information All PrestaShop files MUST start with the PrestaShop license block:\nCore files /** * 2007-2018 PrestaShop * * NOTICE OF LICENSE * * This source file is subject to the Open Software License (OSL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * https://opensource.org/licenses/OSL-3.0 * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author PrestaShop SA \u0026lt;contact@prestashop.com\u0026gt; * @copyright 2007-2018 PrestaShop SA * @license https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0) * International Registered Trademark \u0026amp; Property of PrestaShop SA */  Module files /** * 2007-2018 PrestaShop * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License (AFL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * http://opensource.org/licenses/afl-3.0.php * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author PrestaShop SA \u0026lt;contact@prestashop.com\u0026gt; * @copyright 2007-2018 PrestaShop SA * @license http://opensource.org/licenses/afl-3.0.php Academic Free License (AFL 3.0) * International Registered Trademark \u0026amp; Property of PrestaShop SA */  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Development "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/creation/module_file_structure/",
	"title": "File structure for a PrestaShop module",
	"tags": [],
	"description": "",
	"content": " File structure for a PrestaShop module A module is made of a lot of files, all stored in a folder that bears the same name as the module, that folder being in turn stored in the /modules folder at the root of the main PrestaShop folder: /modules/name_of_the_module/.\nHere are the possible files and folders for a PrestaShop 1.7 module:\n➜ module tree -L 3 . ├── config │ └── services.yml ├── config.xml ├── controllers ├── logo.png ├── module_name.php ├── override ├── themes │ └── theme_name │ └── modules ├── translations ├── upgrade └── views ├── css ├── img ├── js └── templates 13 directories, 4 files  Main file: module_name.php The main PHP file should have the same name as the module’s root folder. For instance, for the BlockCMS module:\n Folder name: /modules/blockcms Main file name: /modules/blockcms/blockcms.php  Configuration files: config.xml and services.yml If it does not exist yet, config.xml file is automatically generated by PrestaShop when the module is installed.\nIn services.yml file, you can register your own classes as a Symfony service and alter the ones provided by PrestaShop.\nIcon file: logo.png This needs to be a 32*32 pixels PNG file.\nTemplating: the views folder This folder contains your module’s template files (.tpl or .html.twig files).\nDepending on what you need to override, your files are located in differents subfolders:\n /views/templates/admin: For template files used by the module’s administration legacy controllers. /views/templates/front: For template files used by the module’s front office controllers. /views/templates/hook: For template files used by the module’s hooks.  If you want to override a Twig template file from Back Office, declare your own following the same path in /views/PrestaShop subfolder. For instance, if you want to override product.html.twig template located in Admin/Product/ProductPage, create your own file in /views/PrestaShop/Admin/ProductPage/product.html.twig.\nEvery asset you need to use in the module (css, js or image files) must be located in their folders: /views/{js, css, img}.\nMake actions and pages: the controllers folder This folder contains the Controller files. You can use the same sub-folder paths as for the View files.\nFor instance, /modules/module_name/controllers/front/payment.php is a valid path to share an action with your Front Office.\nOverride Core classes of PrestaShop: the override folder  Try to avoid the overriding of Core classes, this make the upgrade of your application risky.\n You need to follow the same path as the PrestaShop application.\nFor instance, if /modules/module_name/override/classes/Shop.php exists and is not overriden by any more module later, this class will be used instead of the native ShopCore.php class everywhere in your application.\nTranslate your strings: the translations folder This folder contains a php file for each locale: fr.php, es.php. You can contribute to the translations using the Back Office.\nAdapt behavior of others modules: the themes/theme_name/modules folder This folder is essential during modifications of an existing module, so that you can adapt it without having to touch its original files. Notably, it enables you to handle the module’s template files in various ways, depending on the current theme.\nManage the upgrade: the upgrade folder When releasing a new version of the module, the older might need an upgrade of its data or files. This can be done using this folder.\n Only the three first are necessary for a basic module: the main file, the cache configuration file (which is autogenerated by PrestaShop anyway) and the icon file. All the other ones can be used if necessary, but a module can work without them.\nThe module can also as many other files and folders as necessary: /css, /img, /js, etc.\n External libraries If wish to use an external library, it should be put in a dedicated folder.\nThat folder can use one of these names: \u0026lsquo;lib\u0026rsquo;, \u0026lsquo;libs\u0026rsquo;, \u0026lsquo;libraries\u0026rsquo;, \u0026lsquo;sdk\u0026rsquo;, \u0026lsquo;vendor\u0026rsquo;, \u0026lsquo;vendors\u0026rsquo;.\nChoose the most appropriate one for your library (indeed, \u0026lsquo;libraries\u0026rsquo; doesn\u0026rsquo;t not have the same meaning as \u0026lsquo;sdk\u0026rsquo;). You can have more than one such folder, for instance /lib and /sdk.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/getting_started/",
	"title": "Getting started with theme development",
	"tags": [],
	"description": "",
	"content": " Getting started "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/how/",
	"title": "How to contribute",
	"tags": [],
	"description": "",
	"content": " How to contribute to PrestaShop\u0026rsquo;s documentation TL;DR – Contributing is super easy! Edit any page by clicking on the \u0026ldquo;Improve this page\u0026rdquo; link at the top right corner of your screen.\nGetting started There are two ways to contribute to this documentation:\nEdit on GitHub You can pretty much everything directly on GitHub! Click on the \u0026ldquo;Improve this page\u0026rdquo; at the top right of the page you want to edit.\nStandard git workflow Fork the project on GitHub, work on a separate branch, push to your fork and submit a Pull Request.\nGit workflow is recommended if you already know your way around the git workflow, or if you want to work on the site itself. It will also allow you to build the site locally and check out exactly how your changes will look.\n The documentation source code is located in the following GitHub URL:\nhttps://github.com/PrestaShop/docs/tree/hugo\n Note that we are currently using the hugo branch instead of master. This will change after the legacy documentation is fully migrated, and the old site phased out.\n Writing Markdown This site was created using the wonderful Hugo static site generator, but the content itself is written using Markdown.\nDon\u0026rsquo;t worry, you don\u0026rsquo;t need to know anything about Hugo or the Go language to write documentation. The Markdown syntax is basically plain text with some simple added syntax for styling.\nIf you don\u0026rsquo;t know Markdown yet, have a look at this quick Markdown guide from GitHub.\nExtended features: Shortcodes Hugo uses special short codes for many things. Read about them here.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/hooks/list_of_hooks/",
	"title": "List of hooks",
	"tags": [],
	"description": "",
	"content": " List of hooks in PrestaShop 1.7 Update notes A couple of hooks were modified between 1.7.0.x and 1.7.1.x.\n actionDeleteProductInCartAfter has been divided into two hooks:  actionObjectProductInCartDeleteBefore. actionObjectProductInCartDeleteAfter.  displayProductButtons has been renamed into displayProductAdditionalInfo.\nDon’t worry, we kept an alias :)  Full list  action\u0026lt;AdminControllerName\u0026gt;\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController), 'return' =\u0026gt; (mixed) );  action\u0026lt;AdminControllerName\u0026gt;\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController) );  action\u0026lt;AdminControllerName\u0026gt;FormModifier Called when rendering a form in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'object' =\u0026gt; \u0026amp;(ObjectModel), 'fields' =\u0026gt; \u0026amp;(array), 'fields_value' =\u0026gt; \u0026amp;(array), 'form_vars' =\u0026gt; \u0026amp;(array), );  action\u0026lt;AdminControllerName\u0026gt;ListingFieldsModifier Located in: /classes/controller/AdminController.php\nParameters:\narray( 'select' =\u0026gt; \u0026amp;(string), 'join' =\u0026gt; \u0026amp;(string), 'where' =\u0026gt; \u0026amp;(string), 'group_by' =\u0026gt; \u0026amp;(string), 'order_by' =\u0026gt; \u0026amp;(string), 'order_way' =\u0026gt; \u0026amp;(string), 'fields' =\u0026gt; \u0026amp;(array) );  action\u0026lt;AdminControllerName\u0026gt;OptionsModifier Located in: /classes/controller/AdminController.php\nParameters:\narray( 'options' =\u0026gt; \u0026amp;(array), 'option_vars' =\u0026gt; \u0026amp;(array), );  actionAdmin\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any admin controller\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController), 'return' =\u0026gt; (mixed) );  actionAdmin\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any admin controller\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController) );  actionAdminControllerSetMedia Located in: /classes/controller/AdminController.php\nParameters:\nN/A  actionAdminLoginControllerSetMedia Called after adding media to admin login page header\nLocated in: /controllers/admin/AdminLoginController.php\nParameters:\nN/A  actionAdminMetaAfterWriteRobotsFile Called after generating the robots.txt file\nLocated in: /classes/Tools.php\nParameters:\narray( 'rb_data' =\u0026gt; (array) File data, 'write_fd' =\u0026gt; \u0026amp;(resource) File handle );  actionAdminMetaBeforeWriteRobotsFile Called before generating the robots.txt file\nLocated in: /classes/Tools.php\nParameters:\narray( 'rb_data' =\u0026gt; \u0026amp;(array) File data );  actionAdminMetaSave Called after saving the configuration in AdminMeta\nLocated in: /controllers/admin/AdminMetaController.php\nParameters:\nN/A  actionAdminOrdersTrackingNumberUpdate Located in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; (Order), 'customer' =\u0026gt; (Customer), 'carrier' =\u0026gt; (Carrier) );  actionAdminProductsListingFieldsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php\nParameters:\narray( '_ps_version' =\u0026gt; (string) PrestaShop version, 'sql_select' =\u0026gt; \u0026amp;(array), 'sql_table' =\u0026gt; \u0026amp;(array), 'sql_where' =\u0026gt; \u0026amp;(array), 'sql_order' =\u0026gt; \u0026amp;(array), 'sql_limit' =\u0026gt; \u0026amp;(string), );  actionAdminProductsListingResultsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php\nParameters:\narray( '_ps_version' =\u0026gt; (string) PrestaShop version, 'products' =\u0026gt; \u0026amp;(PDOStatement), 'total' =\u0026gt; (int), );  actionAdminThemesControllerUpdate_optionsAfter Located in: /controllers/admin/AdminThemesController.php\nParameters:\nN/A  actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before Located in: /classes/controller/Controller.php\nParameters:\narray( 'value' =\u0026gt; (string) );  actionAjaxDieBefore (deprecated since 1.6.1.1)\nLocated in: /classes/controller/Controller.php\n actionAttributeCombinationDelete Located in: /classes/Combination.php\n actionAttributeCombinationSave Located in: /classes/Combination.php\n actionAttributeDelete Called when deleting an attributes features value\nLocated in: /classes/Attribute.php\n actionAttributeGroupDelete Called while deleting an attributes group\nLocated in: /classes/AttributeGroup.php\n actionAttributeGroupSave Called while saving an attributes group\nLocated in: /classes/AttributeGroup.php\n actionAttributeSave Called while saving an attributes features value\nLocated in: /classes/Attribute.php\n actionAuthentication After successful customer authentication\nLocated in: /classes/form/CustomerLoginForm.php\n actionAuthenticationBefore Before a customer successfully signs in\nLocated in: /classes/form/CustomerLoginForm.php\n actionBeforeAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt; (deprecated since 1.6.1.1) → actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before\nLocated in: /classes/controller/Controller.php\n actionBeforeCartUpdateQty Located in: /classes/Cart.php\n actionCarrierProcess Carrier process\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\n actionCarrierUpdate This hook is called when a carrier is updated\nLocated in:\n /controllers/admin/AdminCarrierWizardController.php /controllers/admin/AdminCarriersController.php   actionCartSave After a product is added to the cart or if the cart\u0026rsquo;s content is modified\nLocated in: /classes/Cart.php\n actionCartSummary Located in: /classes/Cart.php\n actionCartUpdateQuantityBefore Located in: /classes/Cart.php\n actionCategoryAdd Invoked when a category is created\nLocated in: /classes/Category.php\n actionCategoryDelete Invoked when a category is deleted\nLocated in: /classes/Category.php\n actionCategoryUpdate Invoked when a category is modified\nLocated in:\n /classes/Category.php /controllers/admin/AdminProductsController.php   actionClearCache Available since: 1.7.1\nInvoked when the smarty cache is cleared\nLocated in: /classes/Tools.php\n actionClearCompileCache Available since: 1.7.1\nInvoked when the smarty compile cache is cleared\nLocated in: /classes/Tools.php\n actionClearSf2Cache Available since: 1.7.1\nInvoked when the Symfony cache is cleared\nLocated in: /classes/Tools.php\n actionCustomerAccountAdd Invoked when a new customer creates an account successfully\nLocated in: /classes/form/CustomerPersister.php\nParameters:\narray( '_POST' =\u0026gt; (array) $_POST, 'newCustomer' =\u0026gt; (object) Customer object );  actionCustomerAccountUpdate Invoked when a customer updates its account successfully\nLocated in: /classes/form/CustomerPersister.php\n actionCustomerAddGroups Located in: /classes/Customer.php\n actionCustomerBeforeUpdateGroup Located in: /classes/Customer.php\n actionCustomerLogoutAfter Located in: /classes/Customer.php\n actionCustomerLogoutBefore Located in: /classes/Customer.php\n actionDeliveryPriceByPrice Located in: /classes/Carrier.php\n actionDeliveryPriceByWeight Located in: /classes/Carrier.php\n actionDispatcher Located in: /classes/Dispatcher.php\n actionDispatcherAfter Available since: 1.7.1\nThis hook is called at the end of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDispatcherBefore Available since: 1.7.1\nThis hook is called at the beginning of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDownloadAttachment Located in: /controllers/front/AttachmentController.php\n actionEmailAddAfterContent Add extra content after mail content This hook is called just after fetching mail template\nLocated in: /classes/Mail.php\n actionEmailAddBeforeContent Add extra content before mail content This hook is called just before fetching mail template\nLocated in: /classes/Mail.php\n actionEmailSendBefore Before sending an email This hook is used to filter the content or the metadata of an email before sending it or even prevent its sending\nLocated in: /classes/Mail.php\n actionFeatureDelete This hook is called while deleting an attributes features\nLocated in: /classes/Feature.php\n actionFeatureSave This hook is called while saving an attributes features\nLocated in: /classes/Feature.php\n actionFeatureValueDelete This hook is called while deleting an attributes features value\nLocated in: /classes/FeatureValue.php\n actionFeatureValueSave This hook is called while saving an attributes features value\nLocated in: /classes/FeatureValue.php\n actionFrontControllerSetMedia Located in: /classes/controller/FrontController.php\n actionGetExtraMailTemplateVars Located in: /classes/Mail.php\n actionGetIDZoneByAddressID Located in: /classes/Address.php\n actionGetProductPropertiesAfter Located in: /classes/Product.php\n actionGetProductPropertiesBefore Located in: /classes/Product.php\n actionHtaccessCreate After .htaccess creation\nLocated in: /classes/Tools.php\n actionInvoiceNumberFormatted Located in: /classes/order/OrderInvoice.php\n actionModuleInstallAfter Located in: /classes/module/Module.php\n actionModuleInstallBefore Located in: /classes/module/Module.php\n actionModuleRegisterHookAfter Located in: /classes/Hook.php\n actionModuleRegisterHookBefore Located in: /classes/Hook.php\n actionModuleUnRegisterHookAfter Located in: /classes/Hook.php\n actionModuleUnRegisterHookBefore Located in: /classes/Hook.php\n actionObject Located in: /classes/ObjectModel.php\n actionObjectAddAfter Located in: /classes/ObjectModel.php\n actionObjectAddBefore Located in: /classes/ObjectModel.php\n actionObjectAttributeAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php\n actionObjectAttributeGroupAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php\n actionObjectDeleteAfter Located in: /classes/ObjectModel.php\n actionObjectDeleteBefore Located in: /classes/ObjectModel.php\n actionObjectProductInCartDeleteAfter Available since: 1.7.1\nThis hook is called after a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectProductInCartDeleteBefore Available since: 1.7.1\nThis hook is called before a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectUpdateAfter Located in: /classes/ObjectModel.php\n actionObjectUpdateBefore Located in: /classes/ObjectModel.php\n actionOnImageCutAfter Located in: /classes/ImageManager.php\n actionOnImageResizeAfter Located in: /classes/ImageManager.php\n actionOrderEdited This hook is called when an order is edited\nLocated in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; (object) Order );  actionOrderHistoryAddAfter This hook is displayed when a customer returns a product\nLocated in: /classes/order/OrderHistory.php\n actionOrderReturn Called after a new Order Return has been made.\nLocated in: /controllers/front/OrderFollowController.php\nParameters:\narray( 'orderReturn' =\u0026gt; (object) OrderReturn );  actionOrderSlipAdd Called when the quantity of a product changes in an order. WARNING: only invoked when a product is actually removed from an order.\nLocated in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; Order, 'productList' =\u0026gt; array( (int) product ID 1, (int) product ID 2, ..., (int) product ID n ), 'qtyList' =\u0026gt; array( (int) quantity 1, (int) quantity 2, ..., (int) quantity n ) ); The order of IDs and quantities is important!  actionOrderStatusPostUpdate Called after the status of an order changes.\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'newOrderStatus' =\u0026gt; (object) OrderState, 'id_order' =\u0026gt; (int) Order ID );  actionOrderStatusUpdate Called before the status of an order changes.\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'newOrderStatus' =\u0026gt; (object) OrderState, 'id_order' =\u0026gt; (int) Order ID );  actionOutputHTMLBefore Available since: 1.7.1\nBefore HTML output This hook is used to filter the whole HTML page before it is rendered (only front)\nLocated in: /classes/controller/FrontController.php\n actionPasswordRenew Located in: /controllers/front/PasswordController.php\n actionPaymentCCAdd Payment CC added\nLocated in: /classes/order/OrderPayment.php\nParameters:\narray( 'paymentCC' =\u0026gt; (object) OrderPayment object );  actionPaymentConfirmation Called after a payment has been validated\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'id_order' =\u0026gt; (int) Order ID );  actionPDFInvoiceRender Located in:\n /classes/PaymentModule.php /classes/order/OrderHistory.php /controllers/admin/AdminPdfController.php /controllers/front/PdfInvoiceController.php   actionProductAdd This hook is displayed after a product is created\nLocated in: /controllers/admin/AdminProductsController.php\n actionProductAttributeDelete This hook is displayed when a product\u0026rsquo;s attribute is deleted\nLocated in: /classes/Product.php\n actionProductAttributeUpdate This hook is displayed when a product\u0026rsquo;s attribute is updated\nLocated in: /classes/Product.php\n actionProductCancel This hook is called when you cancel a product in an order\nLocated in: /controllers/admin/AdminOrdersController.php\n actionProductCoverage Located in: /classes/stock/StockManager.php\n actionProductDelete This hook is called when a product is deleted\nLocated in: /classes/Product.php\n actionProductOutOfStock This hook displays new action buttons if a product is out of stock\nLocated in:\n /themes/classic/templates/catalog/_partials/product-details.tpl /themes/classic/templates/catalog/product.tpl   actionProductSave This hook is called while saving products\nLocated in: /classes/Product.php\n actionProductSearchAfter Available since: 1.7.1\nThis hook is called after the product search. Parameters are already filter\nLocated in: /classes/controller/ProductListingFrontController.php\n actionProductUpdate This hook is displayed after a product has been updated\nLocated in:\n /classes/Product.php /controllers/admin/AdminProductsController.php   actionSearch Available since: 1.7.1\nAfter the search in the store. Includes both instant and normal search.\nLocated in: /src/Adapter/Search/SearchProductSearchProvider.php\nParameters:\narray( 'expr' =\u0026gt; (string) Search query, 'total' =\u0026gt; (int) Amount of search results );  actionSetInvoice Located in: /classes/order/Order.php\n actionShopDataDuplication After duplicating a shop.\nLocated in: /classes/shop/Shop.php\nParameters:\narray( 'old_id_shop' =\u0026gt; (int) Old shop ID, 'new_id_shop' =\u0026gt; (int) New shop ID );  actionSubmitAccountBefore Available since: 1.7.1\nLocated in: /controllers/front/AuthController.php\n actionUpdateLangAfter Available since: 1.7.1\nUpdate \u0026ldquo;lang\u0026rdquo; tables after adding or updating a language\nLocated in: /classes/Language.php\n actionUpdateQuantity After updating the quantity of a product. Quantity is updated only when a customer effectively places their order\nLocated in: /classes/stock/StockAvailable.php\nParameters:\narray( 'id_product' =\u0026gt; (int) Product ID, 'id_product_attribute' =\u0026gt; (int) Product attribute ID, 'quantity' =\u0026gt; (int) New product quantity );  actionValidateCustomerAddressForm This hook is called when a customer submit its address form\nLocated in: /classes/form/CustomerAddressForm.php\nParameters:\narray( 'cart' =\u0026gt; (object) Cart, 'order' =\u0026gt; (object) Order, 'customer' =\u0026gt; (object) Customer, 'currency' =\u0026gt; (object) Currency, 'orderStatus' =\u0026gt; (object) OrderState );  actionValidateOrder After an order has been validated. Doesn\u0026rsquo;t necessarily have to be paid.\nLocated in: /classes/PaymentModule.php\n actionWatermark After a watermark has been added to an image.\nLocated in:\n /classes/FileUploader.php /classes/webservice/WebserviceSpecificManagementImages.php /controllers/admin/AdminImportController.php /controllers/admin/AdminProductsController.php  Parameters:\narray( 'id_image' =\u0026gt; (int) Image ID, 'id_product' =\u0026gt; (int) Product ID );  additionalCustomerFormFields Add fields to the Customer form This hook returns an array of FormFields to add them to the customer registration form\nLocated in: /classes/form/CustomerFormatter.php\n addWebserviceResources This hook is called when webservice resources list in webservice controller\nLocated in: /classes/webservice/WebserviceRequest.php\n dashboardData Located in: /controllers/admin/AdminDashboardController.php\n dashboardZoneOne Located in: /controllers/admin/AdminDashboardController.php\n dashboardZoneTwo Located in: /controllers/admin/AdminDashboardController.php\n displayAdminAfterHeader Located in:\n admin-dev/themes/default/template/header.tpl admin-dev/themes/new-theme/template/layout.tpl   displayAdminCustomers Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office\nLocated in: admin-dev/themes/default/template/controllers/customers/helpers/view/view.tpl\nParameters:\narray( 'id_customer' = (int) Customer ID );  displayAdminForm Located in: admin-dev/themes/default/template/helpers/form/form.tpl\n displayAdminListAfter Located in:\n admin-dev/themes/default/template/controllers/countries/helpers/list/list_footer.tpl admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_footer.tpl admin-dev/themes/default/template/helpers/list/list_footer.tpl   displayAdminListBefore Located in:\n admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_header.tpl admin-dev/themes/default/template/helpers/list/list_header.tpl   displayAdminLogin Located in: admin-dev/themes/default/template/controllers/login/content.tpl\n displayAdminNavBarBeforeEnd Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office\nLocated in:\n admin-dev/themes/default/template/nav.tpl admin-dev/themes/new-theme/template/components/layout/nav_bar.tpl   displayAdminOptions Located in: admin-dev/themes/default/template/helpers/options/options.tpl\n displayAdminOrder Display new elements in the Back Office, tab AdminOrder This hook launches modules when the AdminOrder tab is displayed in the Back Office\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\nParameters:\narray( 'id_order' = (int) Order ID );  displayAdminOrderContentOrder Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderContentShip Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderLeft Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderRight Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderTabOrder Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderTabShip Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminProductsExtra  displayAdminProductsCombinationBottom Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_combination.html.twig\n displayAdminProductsMainStepLeftColumnBottom Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepLeftColumnMiddle Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepRightColumnBottom Display new elements in back office product page, right column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepBottom Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepTop Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsPriceStepBottom Display new elements in back office product page, Price tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsQuantitiesStepBottom Display new elements in back office product page, Quantities/Com This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsSeoStepBottom Display new elements in back office product page, SEO tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_seo.html.twig\n displayAdminProductsShippingStepBottom Display new elements in back office product page, Shipping tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_shipping.html.twig\n displayAdminStatsModules Located in: /controllers/admin/AdminStatsTabController.php\n displayAdminView Located in: admin-dev/themes/default/template/helpers/view/view.tpl\n displayAfterBodyOpeningTag Very top of pages Use this hook for advertisement or modals you want to load first\nLocated in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayAfterCarrier After carriers list This hook is displayed after the carrier list in Front Office\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\n displayAfterProductThumbs Available since: 1.7.1\nDisplay extra content below product thumbs This hook displays new elements below product images ex. additional media\nLocated in: /themes/classic/templates/catalog/_partials/product-cover-thumbnails.tpl\n displayAfterThemeInstallation Located in: admin-dev/themes/default/template/controllers/themes/helpers/view/view.tpl\n displayAttributeForm Add fields to the form \u0026lsquo;attribute value\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute value\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/attributes/helpers/form/form.tpl\n displayAttributeGroupForm Add fields to the form \u0026lsquo;attribute group\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute group\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/attributes_groups/helpers/form/form.tpl\n displayBackOfficeCategory Display new elements in the Back Office, tab AdminCategories This hook launches modules when the AdminCategories tab is displayed in the Back Office\nLocated in: /controllers/admin/AdminCategoriesController.php\n displayBackOfficeFooter Displayed within the admin panel\u0026rsquo;s footer\nLocated in:\n admin-dev/themes/default/template/footer.tpl admin-dev/themes/new-theme/template/footer.tpl   displayBackOfficeHeader Displayed between the \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; tags on every Back Office page (when logged in).\nLocated in: /classes/controller/AdminController.php\n displayBackOfficeOrderActions Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayBackOfficeTop Shown above the actual content of a Back Office page\nLocated in: /classes/controller/AdminController.php\n displayBanner Available since: 1.7.1\nLocated in: /themes/classic/templates/_partials/header.tpl\n displayBeforeBodyClosingTag Very bottom of pages Use this hook for your modals or any content you want to load at the very end\nLocated in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayBeforeCarrier This hook is displayed before the carrier list on the Front Office\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\nParameters:\narray( 'carriers' =\u0026gt; array( array( 'name' =\u0026gt; (string) Name, 'img' =\u0026gt; (string) Image URL, 'delay' =\u0026gt; (string) Delay text, 'price' =\u0026gt; (float) Total price with tax, 'price_tax_exc' =\u0026gt; (float) Total price without tax, 'id_carrier' =\u0026gt; (int) intified option delivery identifier, 'id_module' =\u0026gt; (int) Module ID )), 'checked' =\u0026gt; (int) intified selected carriers, 'delivery_option_list' =\u0026gt; array(array( 0 =\u0026gt; array( // First address '12,' =\u0026gt; array( // First delivery option available for this address carrier_list =\u0026gt; array( 12 =\u0026gt; array( // First carrier for this option 'instance' =\u0026gt; Carrier Object, 'logo' =\u0026gt; \u0026lt;url to the carrier's logo\u0026gt;, 'price_with_tax' =\u0026gt; 12.4, // Example 'price_without_tax' =\u0026gt; 12.4, // Example 'package_list' =\u0026gt; array( 1, // Example 3, // Example ), ), ), is_best_grade =\u0026gt; true, // Does this option have the biggest grade (quick shipping) for this shipping address is_best_price =\u0026gt; true, // Does this option have the lower price for this shipping address unique_carrier =\u0026gt; true, // Does this option use a unique carrier total_price_with_tax =\u0026gt; 12.5, total_price_without_tax =\u0026gt; 12.5, position =\u0026gt; 5, // Average of the carrier position ), ), )), 'delivery_option' =\u0026gt; array( '\u0026lt;id_address\u0026gt;' =\u0026gt; Delivery option, ... ) );  NOTE: intified means an array of integers \u0026lsquo;intified\u0026rsquo; by Cart::intifier\n displayCarrierExtraContent Display additional content for a carrier (e.g pickup points) This hook calls only the module related to the carrier, in order to add options when needed\nLocated in: /classes/checkout/DeliveryOptionsFinder.php\n displayCarrierList Display extra carriers in the carrier list.\nLocated in: /classes/Cart.php\nParameters:\narray( 'address' =\u0026gt; (object) Address object );  displayCartExtraProductActions Extra buttons in shopping cart This hook adds extra buttons to the product lines, in the shopping cart\nLocated in: /themes/classic/templates/checkout/_partials/cart-detailed-product-line.tpl\n displayCheckoutSubtotalDetails Located in: /themes/classic/templates/checkout/_partials/cart-detailed-totals.tpl\n displayCheckoutSummaryTop Located in: /themes/classic/templates/checkout/_partials/cart-summary.tpl\n displayCMSDisputeInformation Located in: /themes/classic/templates/cms/page.tpl\n displayCMSPrintButton Located in: /themes/classic/templates/cms/page.tpl\n displayCrossSellingShoppingCart Located in: themes/classic/templates/checkout/cart-empty.tpl\n displayContentWrapperBottom Content wrapper section (bottom) This hook displays new elements in the bottom of the content wrapper\nLocated in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayContentWrapperTop Content wrapper section (top) This hook displays new elements in the top of the content wrapper\nLocated in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayCrossSellingShoppingCart Located in: /themes/classic/templates/checkout/cart-empty.tpl\n displayCustomerAccount Displays new elements on the customer account page in Front Office\nLocated in: /themes/classic/templates/customer/my-account.tpl\n displayCustomerAccountForm Displays information on the customer account creation form\nLocated in: /classes/form/CustomerForm.php\n displayCustomerAccountFormTop Displayed above the customer\u0026rsquo;s account creation form\nLocated in: /controllers/front/AuthController.php\n displayCustomerLoginFormAfter Displays new elements after the login form\nLocated in: /themes/classic/templates/customer/authentication.tpl\n displayCustomization Located in: /classes/Product.php\n displayDashboardTop Dashboard Top Displays the content in the dashboard\u0026rsquo;s top area\nLocated in: admin-dev/themes/default/template/page_header_toolbar.tpl\n displayExpressCheckout Located in: /themes/classic/templates/checkout/_partials/cart-detailed-actions.tpl\n displayFeatureForm Add fields to the form \u0026lsquo;feature\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/features/helpers/form/form.tpl\n displayFeaturePostProcess On post-process in admin feature This hook is called on post-process in admin feature\nLocated in: /controllers/admin/AdminFeaturesController.php\n displayFeatureValueForm Add fields to the form \u0026lsquo;feature value\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature value\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/feature_value/helpers/form/form.tpl\n displayFeatureValuePostProcess On post-process in admin feature value This hook is called on post-process in admin feature value\nLocated in: /controllers/admin/AdminFeaturesController.php\n displayFooter Displays new blocks in the footer\nLocated in: /themes/classic/templates/_partials/footer.tpl\n displayFooterAfter Located in: /themes/classic/templates/_partials/footer.tpl\n displayFooterBefore Located in: /themes/classic/templates/_partials/footer.tpl\n displayFooterProduct Added under the product\u0026rsquo;s description\nLocated in: /themes/classic/templates/catalog/product.tpl\n displayHeader Added in the header of every page\nLocated in: /classes/controller/FrontController.php\n displayHome Displayed on the content of the home page.\nLocated in: /controllers/front/IndexController.php\n displayInvoice Invoice This hook displays new blocks on the invoice (order)\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayInvoiceLegalFreeText PDF Invoice - Legal Free Text This hook allows you to modify the legal free text on PDF invoices\nLocated in: /classes/pdf/HTMLTemplateInvoice.php\n displayLeftColumn Displays new elements in the left-hand column\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayLeftColumnProduct Displays new elements in the left-hand column of the product page\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayMaintenance Maintenance Page This hook displays new elements on the maintenance page\nLocated in: /classes/controller/FrontController.php\n displayMyAccountBlock Displays extra information within the \u0026ldquo;my account: block\nLocated in: /themes/classic/modules/ps_customeraccountlinks/ps_customeraccountlinks.tpl\n displayNav1 Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNav2 Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNavFullWidth Navigation This hook displays full width navigation menu at the top of your pages\nLocated in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNotFound Located in: /themes/classic/templates/errors/not-found.tpl\n displayOrderConfirmation Called within an order\u0026rsquo;s confirmation page\nLocated in: /controllers/front/OrderConfirmationController.php\nParameters:\narray( 'total_to_pay' =\u0026gt; (float) Total amount with tax, 'currency' =\u0026gt; (string) Currency sign, 'objOrder' =\u0026gt; (object) Order, 'currencyObj' =\u0026gt; (object) Currency );  displayOrderConfirmation1 Located in: /themes/classic/templates/checkout/order-confirmation.tpl\n displayOrderConfirmation2 Located in: /themes/classic/templates/checkout/order-confirmation.tpl\n displayOrderDetail Displayed within the order\u0026rsquo;s details in Front Office\nLocated in:\n /controllers/front/GuestTrackingController.php /controllers/front/OrderDetailController.php  Parameters:\narray( 'order' =\u0026gt; (object) Order object );  displayPaymentByBinaries Payment form generated by binaries This hook displays form generated by binaries during the checkout\nLocated in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayPaymentEU Located in: /modules/ps_legalcompliance/ps_legalcompliance.php\n displayPaymentReturn Payment return\nLocated in: /controllers/front/OrderConfirmationController.php\n displayPaymentTop Top of payment page This hook is displayed at the top of the payment page\nLocated in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayProductAdditionalInfo Available since: 1.7.1\nProduct page additional info This hook adds additional information on the product page\nLocated in:\n /themes/classic/templates/catalog/_partials/product-additional-info.tpl /themes/classic/templates/catalog/_partials/quickview.tpl   displayProductListReviews Available since: 1.7.1\nLocated in: /themes/classic/templates/catalog/_partials/miniatures/product.tpl\n displayProductPriceBlock Located in:\n /themes/classic/templates/catalog/_partials/miniatures/product.tpl /themes/classic/templates/catalog/_partials/product-prices.tpl /themes/classic/templates/checkout/_partials/cart-summary-product-line.tpl /themes/classic/templates/checkout/_partials/order-confirmation-table.tpl   displayReassurance Located in:\n /themes/classic/templates/catalog/product.tpl /themes/classic/templates/checkout/cart.tpl /themes/classic/templates/checkout/checkout.tpl   displayRightColumn Displays new elements in the right-hand column\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\nParameters:\narray( 'cart' =\u0026gt; (object) Cart object ); Note that the Cart object can also be retrieved from the current Context.  displayRightColumnProduct Displays new elements in the right-hand column of the product page\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displaySearch Located in: /themes/classic/templates/errors/not-found.tpl\n displayShoppingCart Displays new action buttons within the shopping cart\nLocated in: /themes/classic/templates/checkout/cart.tpl\n displayShoppingCartFooter Shopping cart footer This hook displays some specific information on the shopping cart\u0026rsquo;s page\nLocated in: /themes/classic/templates/checkout/cart.tpl\n displayTop Top of pages This hook displays additional elements at the top of your pages\nLocated in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayWrapperBottom Main wrapper section (bottom) This hook displays new elements in the bottom of the main wrapper\nLocated in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl   displayWrapperTop Main wrapper section (top) This hook displays new elements in the top of the main wrapper\nLocated in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl   filterCmsCategoryContent Filter the content page category This hook is called just before fetching content page category\nLocated in: /controllers/front/CmsController.php\n filterCmsContent Filter the content page This hook is called just before fetching content page\nLocated in: /controllers/front/CmsController.php\n filterHtmlContent Filter HTML field before rending a page This hook is called just before fetching a page on HTML field\nLocated in: /src/Adapter/ObjectPresenter.php\n filterManufacturerContent Filter the content page manufacturer This hook is called just before fetching content page manufacturer\nLocated in: /controllers/front/listing/ManufacturerController.php\n filterProductContent Filter the content page product This hook is called just before fetching content page product\nLocated in: /controllers/front/ProductController.php\n filterProductSearch Available since: 1.7.1\nLocated in: /classes/controller/ProductListingFrontController.php\n filterSupplierContent Located in: /controllers/front/listing/SupplierController.php\n moduleRoutes Located in: /classes/Dispatcher.php\n overrideMinimalPurchasePrice Located in:\n /classes/controller/ModuleFrontController.php /src/Adapter/Cart/CartPresenter.php   sendMailAlterTemplateVars Located in: /prestashop/classes/Mail.php\n termsAndConditions Located in: /classes/checkout/ConditionsToApproveFinder.php\n updateProduct Located in:\n /classes/Product.php /classes/webservice/WebserviceSpecificManagementImages.php   validateCustomerFormFields Located in: /classes/form/CustomerForm.php\n   "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/starter_theme/",
	"title": "Starter Theme",
	"tags": [],
	"description": "",
	"content": " Starter Theme PrestaShop 1.7 introduces a new way for designers to create their theme from scratch: the Starter Theme. The default theme for PS 1.7 is based on the Starter Theme.\nFor pretty much every CMS, the default theme is used as a framework to build custom theme: designers have to rework the default theme and reshape it into what they want to display. Sometimes that means having to spend a lot of time removing all the CSS rules and JavaScript code from the default theme, and rewriting everything. This means a LOT of work before even starting to actually create something original.\nThis means that a lot of themes are tied to the default theme\u0026rsquo;s technical choices, because this way of working makes it hard to make your own choices. For instance, since the default theme uses Bootstrap, it\u0026rsquo;s hard to use Foundation.\nWith the Starter Theme, the PrestaShop team decided to build a skeleton theme that will give you a kickstart for your custom theme, with all the minimum code (essential template files, markup and JavaScript code) and enough freedom to make your own choices. You can choose to use Bootstrap, Foundation or Blueprint. The Starter Theme is not opinionated: there is no decision made to use either one library or another.\nBy using the Starter Theme as the foundation for your custom theme, everything is ready for you, you just have to create upon it.\nDownloading the Starter Theme The Starter Theme is available on GitHub.\nIf you download the StarterTheme and select it as the theme for your store, you will see minimalistic theme with an overly simplistic style. This is only for development purpose. You should NOT use the Starter Theme as is, and you should NOT use its default CSS rules nor include them in your theme: please delete all files inside _dev/css.\nThe jQuery v2 library is loaded by the core.js file.\n Please note that if you want to sell your theme on the PrestaShop Addons marketplace, there are some specific requirements. For instance, Addons-distributed themes MUST use Bootstrap 4.\n Modify. Don\u0026rsquo;t override. When you want to create a new theme, copy and paste all files from the Starter Theme inside your empty theme directory. Then you start modifying it, and building your own theme.\nDo not use it as a parent theme, you will only run into trouble and waste your time.\nOnce you removed all style in _dev/css, your theme should like this:\nRead also our articles on build.prestashop.com.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/creation/about_config_xml_file/",
	"title": "About the config.xml file",
	"tags": [],
	"description": "",
	"content": " About the config.xml file The config.xml file makes it possible to optimize the loading of the module list in the back office.\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; ?\u0026gt; \u0026lt;module\u0026gt; \u0026lt;name\u0026gt;mymodule\u0026lt;/name\u0026gt; \u0026lt;displayName\u0026gt;\u0026lt;![CDATA[My module]]\u0026gt;\u0026lt;/displayName\u0026gt; \u0026lt;version\u0026gt;\u0026lt;![CDATA[1.0]]\u0026gt;\u0026lt;/version\u0026gt; \u0026lt;description\u0026gt;\u0026lt;![CDATA[Description of my module.]]\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;author\u0026gt;\u0026lt;![CDATA[Firstname Lastname]]\u0026gt;\u0026lt;/author\u0026gt; \u0026lt;tab\u0026gt;\u0026lt;![CDATA[front_office_features]]\u0026gt;\u0026lt;/tab\u0026gt; \u0026lt;confirmUninstall\u0026gt;Are you sure you want to uninstall?\u0026lt;/confirmUninstall\u0026gt; \u0026lt;is_configurable\u0026gt;0\u0026lt;/is_configurable\u0026gt; \u0026lt;need_instance\u0026gt;0\u0026lt;/need_instance\u0026gt; \u0026lt;limited_countries\u0026gt;\u0026lt;/limited_countries\u0026gt; \u0026lt;/module\u0026gt;  A few details:\n is_configurable indicates whether the module has a configuration page or not. need_instance indicates whether an instance of the module must be created when it is displayed in the module list. This can be useful if the module has to perform checks on the PrestaShop configuration, and display warning message accordingly. limited_countries is used to indicate the countries to which the module is limited. For instance, if the module must be limited to France and Spain, use \u0026lt;limited_countries\u0026gt;fr,es\u0026lt;/limited_countries\u0026gt;.  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Chapter 3 Testing "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/hooks/use_hooks_on_modern_pages/",
	"title": "Use hooks on modern pages",
	"tags": [],
	"description": "",
	"content": " Use hooks on modern pages You know you can already customize your PrestaShop store thanks to many hooks: the good news is that you can still use hooks like you did in the earlier versions of PrestaShop in modern pages.\nStarting from PrestaShop 1.7.3, you can access the modern Services Container into your modules and so on access powerful and customizable features available in Symfony:\n Twig, the most popular templating engine; Swiftmailer, a feature-rich mailer; Doctrine ORM and Doctrine DBAL to manage your database; Filesystem and Finder libraries to manage all filesystem operations; Monolog for every logging operations; Serializer library for whom who need to manipulate Json and Xml formats\u0026hellip;  Of course, you also have access to every service used by the Core of PrestaShop. This means that you can rely on all services defined in PrestaShopBundle/config/ folder, except from the ones declared in adapter folder: they will be removed at some point.\n If you don\u0026rsquo;t know what is a service, take a look at the Symfony documentation about the services container.\n Better modules on modern pages Let\u0026rsquo;s say your customer want an xml export button directly available from list of products on Product Catalog page: such a common need regarding the number of related modules in the Store.\nHow hard it can be to develop a module that provide this button? Well, it\u0026rsquo;s not! Let\u0026rsquo;s do this feature together.\nFirst step: select the right hook Accessing the Product Catalog page in debug mode we can access the list of available hooks in the debug toolbar:\n moduleRoutes displayBackOfficeHeader displayBackOfficeTop actionAdminControllerSetMedia displayDashboardToolbarTopMenu displayDashboardTop hookdisplayDashboardToolbarIcons displayBackOfficeFooter displayAdminNavBarBeforeEnd displayAdminAfterHeader actionDispatcherBefore actionDispatcherAfter  As we need to act on Dashboard but after the header, in the icons toolbar (with others export options) hookdisplayDashboardToolbarIcons sounds like the hook we are looking for.\nSecond step: create and register the Hook Create a new module called foo and register the hook. You should end up with this kind of code in your module:\n\u0026lt;?php // foo.php /* ... */ /** * Module installation. * * @return bool Success of the installation */ public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook('displayDashboardToolbarIcons'); } /** * Add an \u0026quot;XML export\u0026quot; action in Product Catalog page. * * @return bool Success of the installation */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams['route'] === 'admin_product_catalog') { // to be continued } }   \u0026lsquo;route\u0026rsquo; property is only available for modern pages to find the route related to a page look at the debug toolbar.\n Third step: create your own product serializer At this point, this is basic PHP code we need to produce. We need to retrieve the list of products from database, and serialize them into XML and dump into a file sent to the user.\nUsing Doctrine (DBAL) to retrieve data Even if using old way to retrieve data is still valid (Product::getProducts or through the webservice), we\u0026rsquo;d like to introduce a best practice here: using a repository and get ride of the Object model. This has a lot of advantages, you rely on database instead of model and you\u0026rsquo;ll have better performances and control on your data.\n\u0026lt;?php // src/Repository/ProductRepository.php namespace Foo\\Repository; use Doctrine\\DBAL\\Connection; class ProductRepository { /** * @var Connection the Database connection. */ private $connection; /** * @var string the Database prefix. */ private $databasePrefix; public function __construct(Connection $connection, $databasePrefix) { $this-\u0026gt;connection = $connection; $this-\u0026gt;databasePrefix = $databasePrefix; } /** * @param int $langId the lang id * @return array the list of products */ public function findAllbyLangId(int $langId) { $prefix = $this-\u0026gt;databasePrefix; $productTable = \u0026quot;${prefix}product\u0026quot;; $productLangTable = \u0026quot;${prefix}product_lang\u0026quot;; $query = \u0026quot;SELECT p.* FROM ${productTable} p LEFT JOIN ${productLangTable} pl ON (p.`id_product` = pl.`id_product`) WHERE pl.`id_lang` = :langId\u0026quot;; $statement = $this-\u0026gt;connection-\u0026gt;prepare($query); $statement-\u0026gt;bindValue('langId', $langId); $statement-\u0026gt;execute(); return $statement-\u0026gt;fetchAll(); } }  And declare your repository as a service:\n# modules/foo/config/services.yml services: product_repository: class: Foo\\Repository\\ProductRepository arguments: ['@doctrine.dbal.default_connection', '%database_prefix%']  You can now use it in your module (and everywhere in PrestaShop modern pages!):\n\u0026lt;?php // foo.php /* ... */ /** * Get the list of products for a specific lang. */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams['route'] === 'admin_product_catalog') { $products = $this-\u0026gt;get('product_repository')-\u0026gt;findAllByLangId(1); dump($products); } }  In Product Catalog Page you should see the list of Products in debug toolbar in \u0026ldquo;Dump\u0026rdquo; section:\nUsing the Symfony components to create an XML export file Now we retrieve the product list from our module and that we are able to display the information into the back office, we could already create our XML file with raw PHP. Let\u0026rsquo;s see how we can do it using the components provided by Symfony \u0026ldquo;out of box\u0026rdquo;.\n\u0026lt;?php // foo.php /* ... */ /** * Creates an XML file with list of products in \u0026quot;upload\u0026quot; folder. * * @return bool Success of the installation */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams['route'] === 'admin_product_catalog') { $products = $this-\u0026gt;get('product_repository')-\u0026gt;findAllByLangId(1); $productsXml = $this-\u0026gt;get('serializer')-\u0026gt;serialize($products, 'xml', [ 'xml_root_node_name' =\u0026gt; 'products', 'xml_format_output' =\u0026gt; true, ]); $this-\u0026gt;get('filesystem')-\u0026gt;dumpFile(_PS_UPLOAD_DIR_.'products.xml', $productsXml); } }  Note: the serializer service is not enabled in PrestaShop 1.7.3 but will be enabled in 1.7.4. If you really want to enable it in 1.7.3,uncomment the following configuration line in your services.yml file of your Shop.\n # app/config/services.yml services: # Enables the serializer framework: serializer: { enable_annotations: true }  Render the icon using Twig templating engine Now we have serialized our products, it\u0026rsquo;s time to render an Icon link with the file to download!\nWe could (of course) use Smarty to render a template, but it\u0026rsquo;s a chance to discover Twig which is also available as a service. First, let\u0026rsquo;s refactor and finalize our hook call:\n/** * Make products export in XML. * * @param $params array */ public function hookDisplayDashboardToolbarIcons($params) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $params['route'] === 'admin_product_catalog') { $products = $this-\u0026gt;getProducts(1); $productsXml = $this-\u0026gt;serializeProducts($products); $filepath = _PS_ROOT_DIR_.'/products.xml'; $this-\u0026gt;writeFile($productsXml, $filepath); return $this-\u0026gt;get('twig')-\u0026gt;render('@PrestaShop/Foo/download_link.twig',[ 'filepath' =\u0026gt; _PS_BASE_URL_.'/products.xml', ]); } }  We have extracted business logic into specific functions.\n And now, the template:\n{# in views/PrestaShop/Foo/download_link.twig #} \u0026lt;a id=\u0026quot;desc-product-export\u0026quot; class=\u0026quot;list-toolbar-btn\u0026quot; href=\u0026quot;{{ filepath }}\u0026quot; download\u0026gt; \u0026lt;b data-toggle=\u0026quot;pstooltip\u0026quot; class=\u0026quot;label-tooltip\u0026quot; data-original-title=\u0026quot;{{ \u0026quot;Export XML\u0026quot;|trans({}, 'Module.Foo' }}\u0026quot; data-html=\u0026quot;true\u0026quot; data-placement=\u0026quot;top\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;material-icons\u0026quot;\u0026gt;cloud_upload\u0026lt;/i\u0026gt; \u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt;  We have used a key for translation, making our own translations available in back office when using Twig.\n And \u0026ldquo;voila!\u0026rdquo;, the module could be of course improved with so many features, adding filters on export for instance, using the request hook parameter and updating the Product repository.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/creation/adding_configuration_page/",
	"title": "Adding a configuration page",
	"tags": [],
	"description": "",
	"content": " Adding a configuration page Your module can get a \u0026ldquo;Configure\u0026rdquo; link in the back office module list, and therefore let the user change some settings. This \u0026ldquo;Configure\u0026rdquo; link appears with addition of the getContent() method to your main class. This is a standard PrestaShop method: its sole existence sends a message to the back office, saying \u0026ldquo;there\u0026rsquo;s a configuration page in this module, display the configuration link\u0026rdquo;.\nBut having a getContent() public method in the MyModule object does only make the \u0026ldquo;Configure\u0026rdquo; link appear; it does not create the configuration page out of nowhere. We are going to explain how to create one, where we will be able to edit the content of the MYMODULE_NAME variable that we stored in the ps_configuration data table.\nThe getContent() method First, here is the complete code for the getContent() method:\npublic function getContent() { $output = null; if (Tools::isSubmit('submit'.$this-\u0026gt;name)) { $my_module_name = strval(Tools::getValue('MYMODULE_NAME')); if (!$my_module_name || empty($my_module_name) || !Validate::isGenericName($my_module_name)) $output .= $this-\u0026gt;displayError($this-\u0026gt;l('Invalid Configuration value')); else { Configuration::updateValue('MYMODULE_NAME', $my_module_name); $output .= $this-\u0026gt;displayConfirmation($this-\u0026gt;l('Settings updated')); } } return $output.$this-\u0026gt;displayForm(); }  The getContent() method is the first one to be called when the configuration page is loaded. Therefore, we use it to first update any value that might have been submitted by the form that the configuration page contains.\nHere is a line by line explanation:\n Tools::isSubmit() is a PrestaShop-specific method, which checks if the indicated form has been validated. In this case, if the configuration form has not yet been validated, the whole if() block is skipped and PrestaShop will only use the last line, which displays the configuration with the current values, as generated by the displayForm() method. Tools:getValue() is a PrestaShop-specific method, which retrieve the content of the POST or GET array in order to get the value of the specified variable. In this case, we retrieve the value of the MYMODULE_NAME form variable, turn its value into a text string using the strval() method, and stores it in the $my_module_name PHP variable. We then check for the existence of actual content in $my_module_name, including the use of Validate::isGenericName(). The Validate object contains many data validation methods, among which is isGenericName(), a method that helps you keep only strings that are valid PrestaShop names – meaning, a string that does not contain special characters, for short. If any of these checks fail, the configuration will open with an error message, indicating that the form validation failed. The $output variable, which contains the final rendition of the HTML code that makes the configuration page, thus begins with an error message, created using PrestaShop\u0026rsquo;s displayError() method. This method returns the correct HTML code for our need, and since that code is first in \\$output, this means the configuration will open with that message. If all these checks are successful, this means we can store the value in our database. As we saw earlier in this tutorial, the Configuration object has just the method we need: updateValue() will store the new value for MYMODULE_NAME in the configuration data table. To that end, we add a friendly message to the user, indicating that the value has indeed been saved: we use PrestaShop\u0026rsquo;s displayConfirmation() method to add that message as the first data in the \\$output variable – and therefore, at the top of the page. Finally, we use the custom displayForm() method (which we are going to create and explain in the next section) in order to add content to $output (whether the form was submitted or not), and return that content to the page. Note that we could have included the code for displayForm() right within getContent(), but chose to separate the two for readability and separation of concerns.  This form-validation code is nothing new for PHP developers, but uses some of the PrestaShop methods that you will very regularly use.\nDisplaying the form The configuration form itself is displayed with the displayForm() method. Here is its code, which we are going to explain after the jump:\npublic function displayForm() { // Get default language $default_lang = (int)Configuration::get('PS_LANG_DEFAULT'); // Init Fields form array $fields_form[0]['form'] = array( 'legend' =\u0026gt; array( 'title' =\u0026gt; $this-\u0026gt;l('Settings'), ), 'input' =\u0026gt; array( array( 'type' =\u0026gt; 'text', 'label' =\u0026gt; $this-\u0026gt;l('Configuration value'), 'name' =\u0026gt; 'MYMODULE_NAME', 'size' =\u0026gt; 20, 'required' =\u0026gt; true ) ), 'submit' =\u0026gt; array( 'title' =\u0026gt; $this-\u0026gt;l('Save'), 'class' =\u0026gt; 'btn btn-default pull-right' ) ); $helper = new HelperForm(); // Module, token and currentIndex $helper-\u0026gt;module = $this; $helper-\u0026gt;name_controller = $this-\u0026gt;name; $helper-\u0026gt;token = Tools::getAdminTokenLite('AdminModules'); $helper-\u0026gt;currentIndex = AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name; // Language $helper-\u0026gt;default_form_language = $default_lang; $helper-\u0026gt;allow_employee_form_lang = $default_lang; // Title and toolbar $helper-\u0026gt;title = $this-\u0026gt;displayName; $helper-\u0026gt;show_toolbar = true; // false -\u0026gt; remove toolbar $helper-\u0026gt;toolbar_scroll = true; // yes - \u0026gt; Toolbar is always visible on the top of the screen. $helper-\u0026gt;submit_action = 'submit'.$this-\u0026gt;name; $helper-\u0026gt;toolbar_btn = array( 'save' =\u0026gt; array( 'desc' =\u0026gt; $this-\u0026gt;l('Save'), 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name.'\u0026amp;save'.$this-\u0026gt;name. '\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), ), 'back' =\u0026gt; array( 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), 'desc' =\u0026gt; $this-\u0026gt;l('Back to list') ) ); // Load current value $helper-\u0026gt;fields_value['MYMODULE_NAME'] = Configuration::get('MYMODULE_NAME'); return $helper-\u0026gt;generateForm($fields_form); }  While this might look like a huge block of code for a single value to change, this block actually uses some of PrestaShop\u0026rsquo;s method to make it easier to build forms, most notably the HelperForm object.\nDiving in displayForm() Let\u0026rsquo;s run down that method:\n Using the Configuration::get() method, we retrieve the value of the currently chosen language (\u0026rdquo;PS_LANG_DEFAULT\u0026rdquo;). For security reasons, we cast the variable into an integer using (int). In preparation for the generation of the form, we must build an array of the various titles, textfields and other form specifics.\nTo that end, we create the $fields_form variable, which will contain a multidimensional array. Each of the arrays it features contains the detailed description of the tags the form must contain. From this variable, PrestaShop will render the HTML form as it is described.\nIn this example, we define three tags (\u0026lt;legend\u0026gt;, \u0026lt;input\u0026gt; and \u0026lt;submit\u0026gt;) and their attributes using arrays. The format is quite easy to get: the legend and submit arrays simply contain the attributes to each tag, while the input contains as many tags are needed, each being in turn an array which contains the necessary attributes. For instance:  'input' =\u0026gt; array( array( 'type' =\u0026gt; 'text', 'label' =\u0026gt; $this-\u0026gt;l('Configuration value'), 'name' =\u0026gt; 'MYMODULE_NAME', 'size' =\u0026gt; 20, 'required' =\u0026gt; true ))  \u0026hellip;generates the following HTML tags:\n\u0026lt;label\u0026gt;Configuration value \u0026lt;/label\u0026gt; \u0026lt;div class=\u0026quot;margin-form\u0026quot;\u0026gt; \u0026lt;input id=\u0026quot;MYMODULE_NAME\u0026quot; class=\u0026quot;\u0026quot; type=\u0026quot;text\u0026quot; size=\u0026quot;20\u0026quot; value=\u0026quot;my friend\u0026quot; name=\u0026quot;MYMODULE_NAME\u0026quot;\u0026gt; \u0026lt;sup\u0026gt;*\u0026lt;/sup\u0026gt; \u0026lt;div class=\u0026quot;clear\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  As you can see, PrestaShop is quite clever, and generates all the code that is needed to obtain a useful form.\nNote that the value of the main array is actually retrieved later in the form generation code.\n We then create an instance of the HelperForm class. This section of the code is explained in the next section of this chapter. Once the HelperForm settings are all in place, we generate the form based on the content of the $fields_form variable.  Using HelperForm HelperForm is one of the helper methods that were added with PrestaShop 1.5, along with HelperOptions, HelperList, HelperView and HelperHelpAccess. They enable you to generate standard HTML elements for the back office as well as for module configuration pages. You can get more information about Helper classes in the \u0026ldquo;Helpers\u0026rdquo; chapter of this developer guide, with a page dedicated to HelperForm.\nHere is our sample code, as a reminder:\n$helper = new HelperForm(); // Module, Token and currentIndex $helper-\u0026gt;module = $this; $helper-\u0026gt;name_controller = $this-\u0026gt;name; $helper-\u0026gt;token = Tools::getAdminTokenLite('AdminModules'); $helper-\u0026gt;currentIndex = AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name; // Language $helper-\u0026gt;default_form_language = $default_lang; $helper-\u0026gt;allow_employee_form_lang = $default_lang; // title and Toolbar $helper-\u0026gt;title = $this-\u0026gt;displayName; $helper-\u0026gt;show_toolbar = true; // false -\u0026gt; remove toolbar $helper-\u0026gt;toolbar_scroll = true; // yes - \u0026gt; Toolbar is always visible on the top of the screen. $helper-\u0026gt;submit_action = 'submit'.$this-\u0026gt;name; $helper-\u0026gt;toolbar_btn = array( 'save' =\u0026gt; array( 'desc' =\u0026gt; $this-\u0026gt;l('Save'), 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name.'\u0026amp;save'.$this-\u0026gt;name. '\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), ), 'back' =\u0026gt; array( 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), 'desc' =\u0026gt; $this-\u0026gt;l('Back to list') ) ); // Load current value $helper-\u0026gt;fields_value['MYMODULE_NAME'] = Configuration::get('MYMODULE_NAME'); return $helper-\u0026gt;generateForm($fields_form);  Our example uses several of HelperForm\u0026rsquo;s attributes: they need to be set before we generate the form itself from the $fields_form variable:\n $helper-\u0026gt;module: requires the instance of the module that will use the form. $helper-\u0026gt;name_controller: requires the name of the module. $helper-\u0026gt;token: requires a unique token for the module. getAdminTokenLite() helps us generate one. $helper-\u0026gt;currentIndex: $helper-\u0026gt;default_form_language: requires the default language for the shop. $helper-\u0026gt;allow_employee_form_lang: requires the default language for the shop. $helper-\u0026gt;title: requires the title for the form. $helper-\u0026gt;show_toolbar: requires a boolean value – whether the toolbar is displayed or not. $helper-\u0026gt;toolbar_scroll: requires a boolean value – whether the toolbar is always visible when scrolling or not. $helper-\u0026gt;submit_action: requires the action attribute for the form\u0026rsquo;s \u0026lt;submit\u0026gt; tag. $helper-\u0026gt;toolbar_btn: requires the buttons that are displayed in the toolbar. In our example, the \u0026ldquo;Save\u0026rdquo; button and the \u0026ldquo;Back\u0026rdquo; button. $helper-\u0026gt;fields_value[]: this is where we can define the value of the named tag.  Finally, after all is set and done, we can call the generateForm() method, which will take care of putting it all together and, as its name says, generate the form that the user will use to configure the module\u0026rsquo;s settings.\nHere is the rendition of the form as it is presently written – which you can see by yourself by clicking on the \u0026ldquo;Configure\u0026rdquo; link for the module in the back office:\nChange the value to whichever you like, click on the \u0026ldquo;Save\u0026rdquo; button, then go reload the homepage: your module is indeed updated with the new string!\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/hooks/alter_forms_on_modern_pages/",
	"title": "Alter forms on modern pages",
	"tags": [],
	"description": "",
	"content": " Alter forms on modern pages One of the most common tasks for the PrestaShop developers is to alter the data and make it manageable for customers. In PrestaShop 1.6, a specific Form framework was created to help developers. In PrestaShop 1.7, the system has changed as we now rely on the Symfony Form component.\nLet\u0026rsquo;s see an example on how to add, populate, validate and persist a new form field in PrestaShop 1.7.\n Available since PrestaShop 1.7.4   Create the module and register the hooks \u0026lt;?php # /modules/module_name/module_name.php public function hookDisplayAdministrationPageForm(\u0026amp;$hookParams) { $formBuilder = $hookParams['form_builder']; $uploadQuotaForm = $formBuilder-\u0026gt;get('upload_quota'); $uploadQuotaForm-\u0026gt;add('description', TextType::class, [ 'data' =\u0026gt; 'A description', 'label' =\u0026gt; 'Description' ]); } public function hookActionAdministrationPageFormSave(\u0026amp;$hookParams) { // retrieve and validate the data dump($hookParams['form_data']['upload_quota']['description']); // if the data is invalid, populate `errors` array dump($hookParams['errors']); }  The form field should be available in the selected form, can be validated and persisted in the database if valid using the provided hooks. If you access the Administration page in Back Office, you should see the new form field:\nTemplating Of course, you can override every template to improve again the rendering of the form (the Back Office theme may be/will be improved in future versions)\n# /modules/module_name/views/PrestaShop/Admin/AdvancedParameters/administration.html.twig {% block administration_form_upload_quota %} \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card\u0026quot;\u0026gt; \u0026lt;h3 class=\u0026quot;card-header\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;material-icons\u0026quot;\u0026gt;file_upload\u0026lt;/i\u0026gt; {{ 'Upload quota'|trans }} \u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026quot;card-block\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-text\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ ps.label_with_help(('Maximum size for attached files'|trans), ('Set the maximum size allowed for attachment files (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_ATTACHMENT_MAXIMUM_SIZE'|configuration}, 'Admin.Advparameters.Help'))) }} {{ form_errors(uploadQuotaForm.max_size_attached_files) }} {{ form_widget(uploadQuotaForm.max_size_attached_files) }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ ps.label_with_help(('Maximum size for a downloadable product'|trans), ('Define the upload limit for a downloadable product (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_LIMIT_UPLOAD_FILE_VALUE'|configuration}, 'Admin.Advparameters.Help'))) }} {{ form_errors(uploadQuotaForm.max_size_downloadable_product) }} {{ form_widget(uploadQuotaForm.max_size_downloadable_product) }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ ps.label_with_help((\u0026quot;Maximum size for a product's image\u0026quot;|trans), ('Define the upload limit for an image (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_LIMIT_UPLOAD_IMAGE_VALUE'|configuration}, 'Admin.Advparameters.Help'))) }} {{ form_errors(uploadQuotaForm.max_size_product_image) }} {{ form_widget(uploadQuotaForm.max_size_product_image) }} \u0026lt;/div\u0026gt; {# Do what you need to do, I'm really bad at designing pages ^o^ #} \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ form_label(uploadQuotaForm.description) }} {{ form_widget(uploadQuotaForm.description) }} {{ form_errors(uploadQuotaForm.description) }} \u0026lt;/div\u0026gt; {{ form_rest(uploadQuotaForm) }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-footer\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;d-flex justify-content-end\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;{{ 'Save'|trans({}, 'Admin.Actions') }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Documentation "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/creation/displaying_content_in_front_office/",
	"title": "Displaying content on the front office",
	"tags": [],
	"description": "",
	"content": " Displaying content on the front office As it is, the module does not do much. In order to display something on the front office, we have to add support for a few hooks. This is done by implementing the hooks\u0026rsquo; methods, and that was actually done in the install() method we wrote earlier, using the registerHook() method:\npublic function install() { if (Shop::isFeatureActive()) Shop::setContext(Shop::CONTEXT_ALL); return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook('leftColumn') \u0026amp;\u0026amp; $this-\u0026gt;registerHook('header') \u0026amp;\u0026amp; Configuration::updateValue('MYMODULE_NAME', 'my friend'); }  As you can see, we make it so that the module is hooked to the \u0026ldquo;leftColumn\u0026rdquo; and \u0026ldquo;header\u0026rdquo; hooks. In addition to this, we will add code for the \u0026ldquo;rightColumn\u0026rdquo; hook.\nAttaching code to a hook requires a specific method for each:\n hookDisplayLeftColumn(): will hook code into the left column – in our case, it will fetch the MYMODULE_NAME module setting and display the module\u0026rsquo;s template file, mymodule.tpl, which must be located in the /views/templates/hook/ folder. hookDisplayRightColumn(): will simply do the same as hookDisplayLeftColumn(), but for the right column. hookDisplayHeader(): will add a link to the module\u0026rsquo;s CSS file, /css/mymodule.css.  public function hookDisplayLeftColumn($params) { $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( array( 'my_module_name' =\u0026gt; Configuration::get('MYMODULE_NAME'), 'my_module_link' =\u0026gt; $this-\u0026gt;context-\u0026gt;link-\u0026gt;getModuleLink('mymodule', 'display') ) ); return $this-\u0026gt;display(__FILE__, 'mymodule.tpl'); } public function hookDisplayRightColumn($params) { return $this-\u0026gt;hookDisplayLeftColumn($params); } public function hookDisplayHeader() { $this-\u0026gt;context-\u0026gt;controller-\u0026gt;addCSS($this-\u0026gt;_path.'css/mymodule.css', 'all'); }  We are using the Context ($this-\u0026gt;context) to change a Smarty variable: Smarty\u0026rsquo;s assign() method makes it possible for us to set the template\u0026rsquo;s name variable with the value of the MYMODULE_NAME setting stored in the configuration database table.\nThe header hook is not part of the visual header, but enables us to put code in the \u0026lt;head\u0026gt; tag of the generated HTML file. This is very useful for JavaScript or CSS files. To add a link to our CSS file in the page\u0026rsquo;s \u0026lt;head\u0026gt; tag, we use the addCSS() method, which generates the correct \u0026lt;link\u0026gt; tag to the CSS file indicated in parameters.\nSave your file, and already you can hook your module\u0026rsquo;s template into the theme, move it around and transplant it (even though there is not template file for the moment): go to the \u0026ldquo;Positions\u0026rdquo; page from the \u0026ldquo;Modules\u0026rdquo; menu in the back office, then click on the \u0026ldquo;Transplant a module\u0026rdquo; button (top right of the page).\nIn the transplantation form:\n Find \u0026ldquo;My module\u0026rdquo; in the \u0026ldquo;Module\u0026rdquo; drop-down list. Choose \u0026ldquo;(displayLeftColumn) Left column blocks\u0026rdquo; in the \u0026ldquo;Hook into\u0026rdquo; drop-down list. Click \u0026ldquo;Save\u0026rdquo;.  It is useless to try to attach a module to a hook for which it has no implemented method.\nThe \u0026ldquo;Positions\u0026rdquo; page should reload, with the following message: \u0026ldquo;Module transplanted successfully to hook\u0026rdquo; (or maybe \u0026ldquo;This module has already been transplanted to this hook. \u0026ldquo;). Congratulations! Scroll down the \u0026ldquo;Positions\u0026rdquo; page, and you should indeed see your module among the other modules in the \u0026ldquo;Left column blocks\u0026rdquo; list. Move it to the top of the list by drag\u0026rsquo;n\u0026rsquo;dropping the module\u0026rsquo;s row.\nThe module is now attached to the left column\u0026hellip; but without any template to display, it falls short of doing anything useful: if you reload the homepage, the left column simply displays a message where the module should be, saying \u0026ldquo;No template found for module mymodule\u0026rdquo;.\nDisplaying content Now that we have access to the left column, we should display something there for the customer to see.\nThe visible part of the module is defined in .tpl files placed in specific View folders:\n /views/templates/front/: front office features. /views/templates/admin/: back office features. /views/templates/hook/: features hooked to a PrestaShop (so can be displayed either on the front office or the back office).  Template files can have just about any name. It there is only one such file, it is good practice to give it the same name as the folder and main file: mymodule.tpl.\nIn the case of this tutorial, the module will be hooked to the left column. Therefore, the TPL files that are called from the column\u0026rsquo;s hook should be placed in /views/templates/hook/ in order to work properly.\nAs said earlier, the content to be displayed in the theme should be stored in .tpl template files placed in a specific folder: /views/templates/front/. Template files can have just about any name. It there is only one such file, it is good practice to give it the same name as the folder and main file: mymodule.tpl.\nWe will create the mymodule.tpl file, which was passed as a parameter of the display() method in our module\u0026rsquo;s code, in the hookDisplayHome() method. When calling a template from within a hook, PrestaShop looks for that template file in the /views/templates/hook/ folder (in the module\u0026rsquo;s folder), which you must create yourself.\nIn PrestaShop 1.4, the module\u0026rsquo;s template files were to be placed at the root of the module\u0026rsquo;s folder.\nFor compatibility reasons, template files can still reside in the root folder in PrestaShop 1.5 and 1.6, although the sub-folders of /views/templates/ are now the recommended locations. If you intend your module to also work in PrestaShop 1.4, you should keep your files at the root.\nHere is our template file, located at /views/templates/hook/mymodule.tpl:\n\u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_home\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;Welcome!\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  This is just regular HTML code\u0026hellip; except for a few Smarty calls:\n The {l s='xxx' mod='yyy'} call is PrestaShop-specific method that enables you to register the string in the module\u0026rsquo;s translation panel. The s parameter is the string, while the mod parameter must contain the module\u0026rsquo;s identifier (in the present case, \u0026ldquo;mymodule\u0026rdquo;). We only use this method once here for readability reasons, but in practice it should be used on all of the template\u0026rsquo;s strings. The {if}, {else} and {/if} statements are Smarty conditionals. In our example, we check that the $my_module_name Smarty variable exists (using PHP\u0026rsquo;s isset() function, which considered as trusted by Smarty) and that it is not empty. If it goes well, we display the content of that variable; if not, we display \u0026ldquo;World\u0026rdquo;, in order to have \u0026ldquo;Hello World\u0026rdquo;. The {$my_module_link} variable in the link\u0026rsquo;s href attribute: this is a Smarty variable that we will create later on, which will point to PrestaShop\u0026rsquo;s root directory.  In addition to that, we are going to create a CSS file, and save it as /css/mymodule.css in the module\u0026rsquo;s folder (or any sub-folder you like to keep you CSS in):\ndiv#mymodule_block_home p { font-size: 150%; font-style:italic; }  Save the template file in the module\u0026rsquo;s /views/templates/hook/ folder and the CSS file in the module\u0026rsquo;s /css/ folder, reload your shop\u0026rsquo;s homepage: the content of the template should appear on top of the left column, right below the shop\u0026rsquo;s logo (if you have indeed moved it at the top of the \u0026ldquo;Left Column\u0026rdquo; hook during the transplanting part).\nAs you can see, the theme applies its own CSS to the template we added:\n Our \u0026lt;h4\u0026gt; title becomes the block\u0026rsquo;s header, styled the same way as the other block titles. Our \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; block has the same style as the other blocks on the page.  It is not pretty, but it works the way we want it to.\nDisabling the cache If you\u0026rsquo;ve followed this tutorial to the letter and still do not see anything appearing in the theme\u0026rsquo;s left column, it might be because PrestaShop has cached the previous templates, and is still serving these to you. Hence, you see the original version of the theme, without your changes.\nSmarty caches a compiled version of the homepage, for performance reasons. This is immensely helpful for production sites, but is useless for tests sites, where you may load the front-page very regularly in order to see the impact of your changes.\nWhen editing or debugging a theme on a test site, you should always disable the cache, in order to force Smarty to recompile templates on every page load. To that end, go to the \u0026ldquo;Advanced Parameters\u0026rdquo; menu, select the \u0026ldquo;Performance\u0026rdquo; page, then, in the \u0026ldquo;Smarty\u0026rdquo; section:\n Template cache. Choose \u0026ldquo;Disable the cache\u0026rdquo;. Cache. Disable it. Debug console. You can also open the console if you want to learn more about Smarty\u0026rsquo;s internals.  Do NOT disable the cache or enable the debug console on a production site, as it severely slows everything down! You should always perform all your tests in a test site, ideally on your own computer rather than online.\nEmbedding a template in the theme The link that the module displays does not lead anywhere for now. Let\u0026rsquo;s create the display.php file that it targets, with a minimal content, and put it in the module\u0026rsquo;s root folder.\nWelcome to this page!  Click the \u0026ldquo;Click me!\u0026rdquo; link: the resulting page is just that raw text, without anything from the theme. We would like to have this text embedded in the theme, so let\u0026rsquo;s see how to do just that.\nAs you would expect, we have to create a template file in order to use the theme\u0026rsquo;s style. Let\u0026rsquo;s create the display.tpl file, which will contain the basic \u0026ldquo;Welcome to my shop!\u0026rdquo; line, and will be called by display.php. That display.php file will be rewritten into a front-end controller in order to properly embed our basic template within the theme\u0026rsquo;s header, footer, columns, etc.\nNOTE: You should strive to use explicit and recognizable names for your template files, so that you can find them quickly in the back office – which is a must when using the translation tool.\nHere are our two files:\ndisplay.php \u0026lt;?php class mymoduledisplayModuleFrontController extends ModuleFrontController { public function initContent() { parent::initContent(); $this-\u0026gt;setTemplate('module:mymodule/views/templates/front/display.tpl'); } } display.tpl Welcome to my shop!  Let\u0026rsquo;s explore display.php, our first PrestaShop front-end controller, stored in the /controllers/front folder of the module\u0026rsquo;s main folder:\nA front-end controller must be a class that extends the ModuleFrontController class. That controller must have one method: `initContent()`, which calls the parent class' `initContent()` method... ...which then calls the `setTemplate()` method with our `display.tpl` file.  setTemplate() is the method that will take care of embedding our one-line template into a full-blown page, with proper header, footer and sidebars.\nUntil PrestaShop 1.4, developers who wanted to embed a template file into the site\u0026rsquo;s theme had to use PHP\u0026rsquo;s include() calls to include each portion of the page. Here is the equivalent code for display.php:\ndisplay.php \u0026lt;?php // This file must be placed at the root of the module's folder. global $smarty; include('../../config/config.inc.php'); include('../../header.php'); $smarty-\u0026gt;display(dirname(__FILE__).'/display.tpl'); include('../../footer.php'); ?\u0026gt;  As you can see, this is not necessary anymore since PrestaShop 1.5: you can and should use a front-end controller, and both the controller (Controller) and its template (View) should share the same name: display.php is tied to display.tpl.\nSave both files in their respective folders, and reload your shop\u0026rsquo;s homepage, then click on the \u0026ldquo;Click me!\u0026rdquo;, and voilà ! You have your link. With just a few lines, the end result is already much better, with the \u0026ldquo;Welcome\u0026rdquo; line neatly placed between header, footer and columns!\nIt is only a first step, but this gives you an idea of what is possible if you follow the templating rules. Using Smarty\nSmarty is a PHP template engine, and is used by PrestaShop\u0026rsquo;s theming system. It is a free and open-source projet, hosted at http://www.smarty.net/.\nIt parses template .tpl files, looking for dynamic elements to replace with their contextual equivalents, then send the generated result to the browser. Those dynamic elements are indicated with curly brackets: { ... }. Programmers can create new variables and use them in TPL files; PrestaShop adds its own set of variables.\nFor instance, we can create the \\$my_module_message variable in PHP right in the hookDisplayLeftColumn() method, and have it displayed by our template file:\nmymodule.php public function hookDisplayLeftColumn($params) { $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( array( 'my_module_name' =\u0026gt; Configuration::get('MYMODULE_NAME'), 'my_module_link' =\u0026gt; $this-\u0026gt;context-\u0026gt;link-\u0026gt;getModuleLink('mymodule', 'display'), 'my_module_message' =\u0026gt; $this-\u0026gt;l('This is a simple text message') // Do not forget to enclose your strings in the l() translation method ) ); return $this-\u0026gt;display(__FILE__, 'mymodule.tpl'); }  From there on, we can ask Smarty to display the content of this variable in our TPL file.\nmymodule.tpl {$my_module_message}  PrestaShop adds its own set of variables. For instance, {$hook_left_column} will be replaced with the content for the left column, meaning the content from all the modules that have been attached to the left column\u0026rsquo;s hook.\nAll Smarty variables are global. You should therefore pay attention not to name your own variable with the name of an existing Smarty variable, in order to avoid overwriting it. It is good practice to avoid overly simple names, such as {products}, and to prefix it with your module\u0026rsquo;s name, or even your own name or initials, such as: {$henryb_mymodule_products}.\nHere is a list of Smarty variables that are common to all pages:\nFile / folder Description\nimg_ps_dir URL for PrestaShop\u0026rsquo;s image folder.\nimg_cat_dir URL for the categories images folder.\nimg_lang_dir URL for the languages images folder.\nimg_prod_dir URL for the products images folder.\nimg_manu_dir URL for the manufacturers images folder.\nimg_sup_dir URL for the suppliers images folder.\nimg_ship_dir URL for the carriers (shipping) images folder.\nimg_dir URL for the theme\u0026rsquo;s images folder.\ncss_dir URL for the theme\u0026rsquo;s CSS folder.\njs_dir URL for the theme\u0026rsquo;s JavaScript folder.\ntpl_dir URL for the current theme\u0026rsquo;s folder.\nmodules_dir URL the modules folder.\nmail_dir URL for the mail templates folder.\npic_dir URL for the pictures upload folder.\nlang_iso ISO code for the current language.\ncome_from URL for the visitor\u0026rsquo;s origin.\nshop_name Shop name.\ncart_qties Number of products in the cart.\ncart The cart.\ncurrencies The various available currencies.\nid_currency_cooki ID of the current currency. e\ncurrency Currency object (currently used currency).\ncookie User cookie.\nlanguages The various available languages.\nlogged Indicates whether the visitor is logged to a customer account.\npage_name Page name.\ncustomerName Client name (if logged in).\npriceDisplay Price display method (with or without taxes\u0026hellip;).\nroundMode Rounding method in use.\nuse_taxes Indicates whether taxes are enabled or not.\nThere are many other contextual hooks. If you need to display all of the current page\u0026rsquo;s Smarty variables, add the following call:\n{debug}  Comments are based on asterisk:\n{* This string is commented out *} {* This string is too! *}  Unlike with HTML comments, commented-out Smarty code is not present in the final output file.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Fundamentals of PrestaShop Development PrestaShop was conceived so that third-party modules could easily build upon its foundations, making it an extremely customizable e-commerce software.\nPrestaShop’s customization is based on three possibilities:\n Themes, Modules, Overriding.  Themes are explored in full in the Designer Guide.\nModules and the override system are explored in this Developer Guide, starting with the “Concepts” section below. You can learn more about each in the following chapters:\nBy default, PrestaShop is provided with more than 100 modules, enabling you to launch your online business quickly and for free.\nMore than 3000 modules are also available on the Addons marketplace. These additional modules were built by the PrestaShop company or members of the PrestaShop community, and are sold at affordable prices. As a developer, you can also share your modules on this site, and receive 70% of the amounts associated with the sale of your creations. Sign up now!\n Concepts You should be familiar with PHP and Object-Oriented Programming before attempting to write your own module.\nYou can learn PHP here:\n http://www.php.net/manual/en/getting-started.php http://www.codecademy.com/tracks/php  You can learn Object-Oriented programming here:\n http://en.wikipedia.org/wiki/Object-oriented_programming http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/  A module is an extension to PrestaShop that enables any developer to add the following:\n Provide additional functionality to PrestaShop. View additional items on the site (product selection, etc.). Communicate with other e-commerce services (buying guides, payment platforms, logistics, etc.).  Overriding is a system in itself. PrestaShop uses completely object-oriented code. One of the advantages of this is that, with the right code architecture, you can easily replace or extend parts of the core code with your own custom code, without having to touch the core code. Your code thus overrides the core code, making PrestaShop behave as you prefer it to. It is not recommended to use an override in a module that you intend to distribute (for instance through the PrestaShop Addons marketplace), and they are forbidden in partner modules. Keep them for your own shop.\nPrestaShop’s technical architecture PrestaShop is based on a 3-tier architecture:\n Object/data. Database access is controlled through files in the “classes” folder. Data control. User-provided content is controlled by files in the root folder. Design. All of the theme’s files are in the “themes” folder.  This is the same principle as the Model\u0026gt;View\u0026gt;Controller (MVC) architecture, only in a simpler and more accessible way.\nWhile all versions of PrestaShop up to 1.6 took pride in only using a custom architecture, it was decided to incorporate the Symfony PHP framework starting with PrestaShop 1.7.\nThe driving idea is that we want our code to be more robust, more modular, and fully testable. The 1.6 architecture, inherited from version 1.5 and years of PrestaShop development, is not getting any younger, and its age is really starting to show.\nUsing a proven and popular open-source framework will allow us to focus on our core business code (managing a cart, handling orders, calculating prices and taxes, generating invoices, etc.) with greater efficiency, while enjoying the stability of a globally recognized framework.\nA 3-tier architecture has many advantages:\n It’s easier to read the software’s code. Developers can add and edit code faster. Graphic designer and HTML integrators can work with the confines of the /themes folder without having to understand or even read a single line of PHP code. Developers can work on additional data and modules that the HTML integrators can make use of.  Model A model represents the application’s behavior: data processing, database interaction, etc.\nIt describes or contains the data that have been processed by the application. It manages this data and guarantees its integrity.\nView A view is the interface with which the user interacts.\nIts first role is to display the data that is been provided by the model. Its second role is to handle all the actions from the user (mouse click, element selection, buttons, etc.), and send these events to the controller.\nThe view does not do any processing; it only displays the result of the processing performed by the model, and interacts with the user.\nController The Controller manages synchronization events between the Model and the View, and updates both as needed. It receives all the user events and triggers the actions to perform.\nIf an action needs data to be changed, the Controller will “ask” the Model to change the data, and in turn the Model will notify the View that the data has been changed, so that the View can update itself.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": " Chapter 5 What is a PrestaShop module? PrestaShop\u0026rsquo;s extensibility revolves around modules, which are small programs that make use of PrestaShop\u0026rsquo;s functionalities and changes them or add to them in order to make PrestaShop easier to use or more tailored to the merchant\u0026rsquo;s needs.\nTechnical principles behind a module A PrestaShop module consists of a main PHP file with as many other PHP files as needed, as well as the necessary template (.tpl) files and assets (images, JavaScript, CSS, etc.) to display the module\u0026rsquo;s interface, whether to the customer (on the front office) or to the merchant (on the back office).\nAny PrestaShop module, once installed on an online shop, can interact with one or more \u0026ldquo;hooks\u0026rdquo;. Hooks enable you to hook/attach your code to the current View at the time of the code parsing (i.e., when displaying the cart or the product sheet, when displaying the current stock, etc.). Specifically, a hook is a shortcut to the various methods available from the Module object, as assigned to that hook.\nModules\u0026rsquo; operating principles Modules are the ideal way to let your talent and imagination as a developer express themselves, as the creative possibilities are many and you can do pretty much anything with PrestaShop\u0026rsquo;s module API.\nAny module:\n can display a variety of content (blocks, text, etc.), perform many tasks (batch update, import, export, etc.), interface with other tools, and much much more. can be made as configurable as necessary; the more configurable it is, the easier it will be to use, and thus will be able to address the needs of a wider range of users. can add functionalities to PrestaShop without having to edit its core files, thus making it easier to perform an update of PrestaShop without having the transpose all core changes. Indeed, you should always strive to stay away from core files when building a module, even though this may seem necessary in some situations.  Main differences between 1.6 and 1.7 modules PrestaShop 1.7 was built so that modules that were written for PS 1.6 could work almost as-is \u0026ndash; save for minor changes and a cosmetic update, the template files being in need of adapting to the 1.7 default theme.\nThe major module development changes in PrestaShop 1.7 are explained in details in this Build article, and are integrated into this updated documentation. If you already know how to create a module that works with PS 1.6, we strongly advise you to read that article from top to bottom in order to get up to speed with 1.7 development.\nModules folder PrestaShop\u0026rsquo;s modules are found in the /modules folder, which is at the root of the PrestaShop main folder. This is true for both default modules (provided with PrestaShop) and 3rd-party modules that are subsequently installed.\nModules can also be part of a theme if they are really specific to it. In that case, they would be in the theme\u0026rsquo;s own /modules folder, and therefore under the following path: /themes/[my-theme]/modules\nEach module has its own sub-folder inside the /modules folder: /bankwire, /birthdaypresent, etc. About the cache\nThe /cache/class_index.php file contains the link between the class and the declaration file. If there is a caching issue, this file can safely be deleted.\nThe /config/xml folder contains the list of all the base modules:\ndefault_country_modules_list.xml must_have_modules_list.xml tab_modules_list.xml  When the store\u0026rsquo;s front-end doesn\u0026rsquo;t quite reflect your changes and emptying the browser\u0026rsquo;s cache is not effective, you should try emptying the following folders:\n/cache/smarty/cache /cache/smarty/compile  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/creation/enabling_auto_update/",
	"title": "Enabling the Auto-Update",
	"tags": [],
	"description": "",
	"content": " Enabling the Auto-Update Since PrestaShop 1.5, it is possible to have your module auto-update: once a new version is available on Addons, PrestaShop suggests an \u0026ldquo;Update it!\u0026rdquo; button to the user. Clicking this button will trigger a series of methods, each leading closer to the latest version of your module.\nIn order to bring auto-update support to your module, you need three main things:\n Clearly indicate the module\u0026rsquo;s version number in its constructor method: $this-\u0026gt;version = '1.1'; Create an /upgrade sub-folder in the module\u0026rsquo;s folder. Add an auto-update PHP script for each new version.  For instance:\n/* * File: /upgrade/Upgrade-1.1.php */ function upgrade_module_1_1($module) { // Process Module upgrade to 1.1 // .... return true; // Return true if success. }  \u0026hellip;and then:\n/* * File: /upgrade/Upgrade-1.2.php */ function upgrade_module_1_2($module) { // Process Module upgrade to 1.2 // .... return true; // Return true if succes. }  Each method should bring the necessary changes to the module\u0026rsquo;s files and database data in order to reach the latest version.\nFor instance, here is the /upgrade/install-1.4.9.php file from the gamification module:\n\u0026lt;?php if (!defined('_PS_VERSION_')) exit; function upgrade_module_1_4_9($object) { return Db::getInstance()-\u0026gt;execute( 'CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.'tab_advice` ( `id_tab` int(11) NOT NULL, `id_advice` int(11) NOT NULL, PRIMARY KEY (`id_tab`, `id_advice`) ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8;'); }  The homeslider module\u0026rsquo;s install-1.2.1.php file does even more:\n\u0026lt;?php if (!defined('_PS_VERSION_')) exit; function upgrade_module_1_2_1($object) { return Db::getInstance()-\u0026gt;execute(' UPDATE '._DB_PREFIX_.'homeslider_slides_lang SET '.homeslider_stripslashes_field('title').', '.homeslider_stripslashes_field('description').', '.homeslider_stripslashes_field('legend').', '.homeslider_stripslashes_field('url') ); } function homeslider_stripslashes_field($field) { $quotes = array('\u0026quot;\\\\\\'\u0026quot;', '\u0026quot;\\'\u0026quot;'); $dquotes = array('\\'\\\\\\\\\u0026quot;\\'', '\\'\u0026quot;\\''); $backslashes = array('\u0026quot;\\\\\\\\\\\\\\\\\u0026quot;', '\u0026quot;\\\\\\\\\u0026quot;'); return '`'.bqSQL($field).'` = replace(replace(replace(`'.bqSQL($field).'`, '.$quotes[0].', '.$quotes[1].'), '.$dquotes[0].', '.$dquotes[1].'), '.$backslashes[0].', '.$backslashes[1].')'; }  PrestaShop will then parse all of these scripts one after the other, sequentially. It is therefore highly advised to number your module\u0026rsquo;s versions sequentially, and to only use numbers – because the upgrade code uses PHP\u0026rsquo;s version_compare() method.\nAdding/updating modules or hooks between versions If the new version of your module adds or update its hooks, you should make sure to update them too.\nIndeed, since the hooks are (usually) defined when the module is installed, PrestaShop will not install the module again in order to include the new hooks\u0026rsquo; code, so you have to use the upgrade methods:\nFor instance, here\u0026rsquo;s the install-1.2.php file from the blockbestseller module:\n\u0026lt;?php if (!defined('_PS_VERSION_')) exit; function upgrade_module_1_2($object) { return ($object-\u0026gt;registerHook('addproduct') \u0026amp;\u0026amp; $object-\u0026gt;registerHook('updateproduct') \u0026amp;\u0026amp; $object-\u0026gt;registerHook('deleteproduct') \u0026amp;\u0026amp; $object-\u0026gt;registerHook('actionOrderStatusPostUpdate')); }  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/",
	"title": "Themes",
	"tags": [],
	"description": "",
	"content": " Chapter 6 Themes The default PrestaShop install offers a neutral theme in black and white, enabling sellers to quickly and freely start their activity, whatever their business line.\nMore than 3000 themes are available at the PrestaShop Addons marketplace. They were created either by members of the PrestaShop community or the PrestaTeam, and are sold at reasonable prices – some are even free.\nAs a graphic designer/web developer, you too can put your themes up for sale on the PrestaShop Addons marketplace, and earn 70% of the selling price.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/modules/creation/module_translation/",
	"title": "Module translation",
	"tags": [],
	"description": "",
	"content": " Module translation The module\u0026rsquo;s text strings are written in English, but you might want French, Spanish or Polish shop owners to use your module too. You therefore have to translate those strings into those languages, both the front office and the back office strings. Ideally, you should translate your module in all the languages that are installed on your shop. This could be a tedious task, but a whole system has been put in place in order to help you out.\nIn short, PrestaShop 1.7 implements Symfony\u0026rsquo;s translation mechanism, through the use of the trans() method, used to encapsulate the strings to be translated. This method is applied in a different way depending of the file type.\nThis mechanism does not work with 3rd-party modules. You should keep using the legacy translation system and it will work just like in v1.6. Otherwise you won’t be able to translate your modules, which we want to avoid. These comments do not apply to theme development, for the whole theme structure has been redesigned in 1.7. 1.7-specific themes should use the new translation system.\n The process of preparing text strings for translation is called internationalization, or i18n.\nInternationalizing strings in Smarty (.tpl) files Strings in TPL files will need to be turned into dynamic content using the {l} function call, which Smarty will replace by the translation for the chosen language.\nPrestaShop 1.6 used to require the mod parameter for context. PrestaShop 1.7 now requires that parameter to be \u0026ldquo;d\u0026rdquo;, and to use the same domain as all the other strings in the module.\nIn our sample module, the mymodule.tpl file\u0026hellip;\nmymodule.tpl (partial) \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{$base_dir}modules/mymodule/mymodule_page.php\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_left\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;{l s='Welcome!' d='Modules.MyModule'}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  \u0026hellip;becomes:\nmymodule.tpl (partial) \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{$base_dir}modules/mymodule/mymodule_page.php\u0026quot; title=\u0026quot;{l s='Click this link' mod='mymodule'}\u0026quot;\u0026gt;{l s='Click me!' mod='mymodule'}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_left\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;{l s='Welcome!' d='Modules.MyModule'}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt; {if !isset($my_module_name) || !$my_module_name} {capture name='my_module_tempvar'}{l s='World' d='Modules.MyModule'}{/capture} {assign var='my_module_name' value=$smarty.capture.my_module_tempvar} {/if} {l s='Hello %1$s!' sprintf=$my_module_name d='Modules.MyModule'} \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;{l s='Click this link' d='Modules.MyModule'}\u0026quot;\u0026gt;{l s='Click me!' d='Modules.MyModule'}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  \u0026hellip;and the display.tpl file:\ndisplay.tpl Welcome to this page!  \u0026hellip;becomes:\ndisplay.tpl {l s='Welcome to this page!' d='Modules.MyModule'}  Notice that we always use the d parameter. This is used by PrestaShop to assert which module the string belongs to. The translation tool needs it in order to match the string to translate with its translation. This parameter is mandatory for module translation.\nTranslating your module\u0026rsquo;s strings Strings are delimited with single quotes. If a string contains single quotes, they should be escaped using a backslash (\\).\nThis way, strings can be directly translated inside PrestaShop:\n Go to the \u0026ldquo;Translations\u0026rdquo; page under the \u0026ldquo;Localization\u0026rdquo; menu, In the \u0026ldquo;Modify translations\u0026rdquo; drop-down menu, choose \u0026ldquo;Installed modules translations\u0026rdquo;, Choose the language you want to translate the module into. The destination language must already be installed to enable translation in it. Click the \u0026ldquo;Modify\u0026rdquo; button.  The page that loads displays all the strings for all the currently-installed modules. Modules that have all their strings already translated have their fieldset closed, whereas if at least one string is missing in a module\u0026rsquo;s translation, its fieldset is expanded. In order to translate your module\u0026rsquo;s strings (the ones that were \u0026ldquo;marked\u0026rdquo; using the l() method), simply find your module in the list (use the browser\u0026rsquo;s in-page search), and fill the empty fields.\nOnce all strings for your module are correctly translated, click on either the \u0026ldquo;Save and stay\u0026rdquo; button or the \u0026ldquo;Save\u0026rdquo; button at the bottom of your list of strings.\nPrestaShop then saves the translations in a new file, named using the languageCode.php format (for instance, /mymodule/fr.php). The translation file looks like so:\nfr.php\n\u0026lt;?php global $_MODULE; $_MODULE = array(); $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_2ddddc2a736e4128ce1cdfd22b041e7f'] = 'Mon module'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_d6968577f69f08c93c209bd8b6b3d4d5'] = 'Description du module.'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_533937acf0e84c92e787614bbb16a7a0'] = 'Êtes-vous certain de vouloir désinstaller ce module ? Vous perdrez tous vos réglages !'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_0f40e8817b005044250943f57a21c5e7'] = 'Aucun nom fourni'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_fe5d926454b6a8144efce13a44d019ba'] = 'Valeur de configuration non valide.'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_c888438d14855d7d96a2724ee9c306bd'] = 'Réglages mis à jour'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_f4f70727dc34561dfde1a3c529b6205c'] = 'Réglages'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_2f6e771db304264c8104cb7534bb80cd'] = 'Valeur de configuration'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_c9cc8cce247e49bae79f15173ce97354'] = 'Enregistrer'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_630f6dc397fe74e52d5189e2c80f282b'] = 'Retour à la liste'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;display_86e88cbccafa83831b4c6685501c6e58'] = 'Bienvenue sur cette page !'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_9a843f20677a52ca79af903123147af0'] = 'Bienvenue !'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_f5a7924e621e84c9280a9a27e1bcb7f6'] = 'Monde'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_3af204e311ba60e6556822eac1437208'] = 'Bonjour %s !'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_c66b10fbf9cb6526d0f7d7a602a09b75'] = 'Cliquez sur ce lien'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_f42c5e677c97b2167e7e6b1e0028ec6d'] = 'Cliquez-moi !';  This file must not be edited manually! It can only be edited through the PrestaShop translation tool.\nNow that we have a French translation, we can click on the French flag in the front office, and get the expected result: the module\u0026rsquo;s strings are now in French.\nThey are also translated in French when the back office is in French.\nTranslating complex code As we can see, the basis of template file translation is to enclose them in the {l s='The string' mod='name_of_the_module'}. The changes in display.tpl and in mymodule.tpl\u0026rsquo;s link and title texts are thus easy to understand. But added a trickier block of code for the \u0026ldquo;Hello World!\u0026rdquo; string: an if/else/then clause, and a text variable. Let\u0026rsquo;s explore this code:\nHere is the original code:\nHello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} !  As you can see, we need to get the \u0026ldquo;Hello World\u0026rdquo; string translatable, but also to cater for the fact that there is a variable. As explained in the \u0026ldquo;Translations in PrestaShop 1.5\u0026rdquo; chapter, variables are to be marked using sprintf() markers, such as %s or %1$s.\nMaking \u0026ldquo;Hello %s!\u0026rdquo; translatable words in easy: we just need to use this code:\n{l s='Hello %s!' sprintf=$my_module_name d='Modules.MyModule'}  But in our case, we also need to make sure that the %s is replaced by \u0026ldquo;World\u0026rdquo; in case the \u0026ldquo;my_module_name\u0026rdquo; value does not exist\u0026hellip; and we must make \u0026ldquo;World\u0026rdquo; translatable too. This can be achieved by using Smarty {capture} function, which collects the output of the template between the tags into a variable instead of displaying, so that we can use it later on. We are going to use it in order to replace the variable with the translated \u0026ldquo;World\u0026rdquo; if the variable is empty or absent, using a temporary variable. Here is the final code:\n{if !isset($my_module_name) || !$my_module_name} {capture name='my_module_tempvar'}{l s='World' d='Modules.MyModule'}{/capture} {assign var='my_module_name' value=$smarty.capture.my_module_tempvar} {/if} {l s='Hello %s!' sprintf=$my_module_name d='Modules.MyModule'}  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/installation/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Configuring PrestaShop By default, PrestaShop is configured to provide a secure and stable environment to both the shop administrator and the customers.\nAs a developer, there are several changes that you could and should bring to the default installation in order to help you code better, spot bugs faster, and generally make a great PrestaShop product.\nDisabling the cache and forcing Smarty compilation When your development has an impact on the front office, whether you are building a theme or simply a module which displays information to the customer, you should force the template file compilation and disable the cache, so as to always see the result of your changes directly.\nGo to the “Performances” page under the “Advanced parameters” menu to change the following Smarty settings:\n Template cache: switch it to “Force compilation”. Cache: disable it.  Forcing the compilation of Smarty will always slow down the loading time of the page. Make sure that your production store is set to only recompile templates if there are updated files, and that its cache is enabled.\nDisplaying error messages PrestaShop’s default settings prevent the customer to see any server error message or any debugging code.\nYou, on the other hand, need this information in order to correct any potential mistake in your code. To that end, open the /config/defines.inc.php file, and edit it to set _PS_MODE_DEV_ to true:\n/* Debug only */ define('_PS_MODE_DEV_', true);  Using the dump() method These two methods enable you to check for the state of a given variable at a specific place within your code.\nPrestaShop used to have custom debug methods available for developers: p($variable) and d($variable). They were used to display the content of a variable, and were really a wrapper around the well-known print_r() method. On top of that, PrestaShop had the ppp() and ddd() methods, which were respectively the aliases of p() and d(); and the various fd(), epr() and dieObject() methods.\nAll of this has changed with PrestaShop 1.7: we now rely solely on Symonfy’s VarDumper::dump() function. You can now rely on a single method instead of having multiple debug functions. The dump() function is very powerful, and is always available on output (even without die()). Moreover, you can use it in your console scripts because this function also has a formatter in CLI mode.\nThe dump() method is not activated by default. To activate it, you must enable the Debug mode, by setting _PS_MODE_DEV_ to true (see above).\nEnabling the multistore mode Since version 1.5, PrestaShop is able to host more than one store within a single installation of the software. Many shop administrators choose to enable this feature, and it can have a significant impact on the way PrestaShop works. You should therefore make sure that anything you code for PrestaShop works in both single and multistore mode.\nEnabling the multistore mode is easy: go to the general preferences page, and put the “Enable Multistore” option to “Yes”.\nYou can switch back and forth between single store and multistore mode ? in single store mode, only the main store is used.\nYou can read more about the multistore mode in the PrestaShop 1.6 User Guide: http://doc.prestashop.com/display/PS16/Managing+Multiple+Shops.\nAbout the configuration files There are three main configuration files, all located in the /config folder:\n config.inc.php defines.inc.php smarty.config.inc.php  config.inc.php It is the main configuration file for PrestaShop. You should not have to touch anything in there.\ndefines.inc.php This file contains PrestaShop constant values.\nIt also contains the location of all the files and folders. If you need to change their location, do not forget to keep the original path nearby, for instance in a PHP comment, in case you need to revert back to it later on.\nWhen in development/test mode, you must make sure that all the error messages are displayed:\n Set define('_PS_MODE_DEV_', false); to true.  On the contrary, when in production mode, you must hide error messages as much as possible!\n Make sure that define('_PS_MODE_DEV_', false); is set to false.  smarty.config.inc.php This file contains all the Smarty-related settings.\nThe Smarty cache system should always be disabled, as it is not compatible with PrestaShop: keep $smarty-\u0026gt;caching = false; as it is.\n$smarty-\u0026gt;compile_check should be left to false in development mode.\n$smarty-\u0026gt;debugging gives access to Smarty debug information when displaying a page. That setting is more easily modified in the “Performance” page of the advanced parameters menu : the “Debug console” option enables you to choose between never displaying Smarty’s debug information, always displaying it, or only displaying it when you add ?SMARTY_DEBUG to the URL of the page you want to test, which can be very useful.\nWhen in production mode, $smarty-\u0026gt;force_compile must be set to false, as it will give a 30% boost to your page load time.\nOn the other hand, when editing a .tpl file, you must delete the /tools/smarty/compile folder (except the index.php file) in order to see your changes applied.\nNote that this setting can be made directly from the back office, in the “Performance” page under the “Advanced parameters” menu.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": " Accessing the database The database structure By default, PrestaShop’s database tables start with the ps_ prefix. This can be customized during installation\nAll table names are in lowercase, and words are separated with an underscore character (“_”):\n ps_employee ps_manufacturer ps_product ps_product_comment ps_shop_url  When a table establishes the links between two entities, the names of both entities are mentioned in the table’s name. For instance, ps_category_product links products to their category.\nA few details to note about tables:\n Tables which contain translations must end with the _lang suffix. For instance, ps_product_lang contains all the translations for the ps_product table. Tables which contain the records linking to a specific shop must end with the _shop suffix. For instance, ps_category_shop contains the position of each category depending on the store.  There is also a couple of standard practices for data rows within a table:\n Use the id_lang field to store the language associated with a record. Use the id_shop field to store the store associated with a record.  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Setting Up Your Local Development Environment Now that you intend to develop for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your file on your online server in order to test it. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Have a local environment is the essential first step in the path of web development.\nInstalling PrestaShop locally Prerequisites PrestaShop needs the following server configuration in order to run:\n System: Unix, Linux or Windows. Web serve: Apache Web Server 1.3 or any later version. PHP: 5.4 or later. MySQL: 5.0 or later. Server RAM: The more the better…  PrestaShop can also work with Microsoft’s IIS Web server 6.0 or later, and nginx 1.0 or later.\nInstalling a local environment Installing any web-application locally requires that you first install the adequate environment, namely the Apache web server, the PHP language interpreter, the MySQL database server, and ideally the phpMyAdmin tool. This is called an *AMP package: Apache+MySQL+PHP and the operating system, giving WAMP (Windows+Apache+MySQL+PHP), MAMP (Mac OS X+…) and LAMP (Linux+…). Since all of the items packaged are open-source, these installers are most of the time free.\nHere is a selection of free AMP installer:\n XAMPP: http://www.apachefriends.org/en/xampp.html (Windows, Mac OS X, Linux, Solaris) WampServer: http://www.wampserver.com/en/ (Windows) EasyPHP: http://www.easyphp.org/ (Windows) MAMP: http://www.mamp.info/ (Mac OS X)  Configuring PHP PrestaShop needs a few additions to PHP and MySQL in order to fully work. Make sure that your PHP configuration has the following settings and tools:\n GD library. The GD library (https://libgd.github.io/pages/about.html) enables PrestaShop to rework images that you upload, especially resizing them. Dom extension. The Dom extension enables to parse XML documents. PrestaShop uses it for various functionalities, like the Store Locator. It is also used by some modules, as well as the pear_xml_parse library. allow_url_fopen enabled. The allow_url_fopen directive enables modules to access remote files, which is an essential part of the payment process, among others things. It is therefore imperative to have it set to ON.  Here is a section of the php.ini file (the configuration file for PHP):\nextension = php_mysql.dll extension = php_gd2.dll allow_url_fopen = On # also recommended register_globals = Off magic_quotes_gpc = Off allow_url_include = Off  Downloading and extracting the PrestaShop files You can download the latest version of PrestaShop at http://www.prestashop.com/en/downloads.\nYou can download the (unstable) development version on Github: https://github.com/PrestaShop/PrestaShop/archive/develop.zip.\nExtract the PrestaShop files, and put them in the root folder of the AMP installer you chose:\n XAMPP: C:\\xampp\\htdocs or /Applications/xampp/htdocs WampServer: C:\\wamp\\www EasyPHP: C:\\easyphp\\www MAMP: /Applications/MAMP/htdocs/  Creating a database for your local shop Open the phpMyAdmin tool using your browser. Its location depends on the AMP pack you chose:\n http://127.0.0.1/phpmyadmin (XAMPP, WampServer, MAMP), http://127.0.0.1/mysql (EasyPHP)  In the “Databases” tab, indicate the database name you want and validate by clicking on the “Create a database” button.\nInstalling PrestaShop Open the PrestaShop installer, which should be located at http://127.0.0.1/prestashop/install, and follow its instructions.\nYou can read the Getting Started guide for more details: http://doc.prestashop.com/display/PS17/Getting+Started.\nKeeping things secure Once your module is online, its files could be accessed by anyone from the Internet. Even if they cannot trigger anything but PHP errors, you might want to prevent this from happening.\nYou can achieve this by adding an index.php file at the root of any module folder you create. Here is a suggestion for what to put in the file.\nheader(\u0026quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT\u0026quot;); header(\u0026quot;Last-Modified: \u0026quot;.gmdate(\u0026quot;D, d M Y H:i:s\u0026quot;).\u0026quot; GMT\u0026quot;); header(\u0026quot;Cache-Control: no-store, no-cache, must-revalidate\u0026quot;); header(\u0026quot;Cache-Control: post-check=0, pre-check=0\u0026quot;, false); header(\u0026quot;Pragma: no-cache\u0026quot;); header(\u0026quot;Location: ../\u0026quot;); exit;  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/",
	"title": "1.7",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://devdocs.prestashop.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/coding_standards/commits_and_pull_requests/",
	"title": "Commits &amp; Pull Requests",
	"tags": [],
	"description": "",
	"content": " Commits \u0026amp; Pull Requests conventions Commits In the past, we used to have only one commit by pull request. This was a bad habit. We now require contributors to make atomic commits, so you will surely have more than one commit in a single pull request. This will be helpful to review, cherry-pick or revert (we hope to never have to do that 😉) the changes.\nWhat\u0026rsquo;s an atomic commit? It means that the commit\u0026rsquo;s purpose is one, and only one, complete fix or change. Typically, ask yourself if what you are doing is one or several tasks. Do not hesitate to use git add -p ... (details here) if you have made several changes in the same file but not all those changes are meant to be in the current commit.\nWhen you are modifying CSS and/or JavaScript files, we invite you to make a separate commit for the compiled files. If you want to know more about compiling assets, you can look at our documentation.\nThe commit name should also give an idea of the context or of the file that is being changed. The more details, the better! The commit name should be as unique and recognizable as your commit itself.\nIn the past, we used to ask to prepend commit names with FO, BO, CO\u0026hellip; This is no longer needed.\n Pull Requests Now that you have made atomic commits, you surely have a lot of commits for one pull request. A pull request answers to a given issue. Do not ever make a single pull request for many purposes. Do not hesitate to split your big commit into several subprojects. It will be easier and quicker to review.\nAs all your commits messages are well-formated, just make a summary of your pull request’s purpose in its GitHub title. A summary does not mean it can not be explicit. Please describe what your pull request does in details (avoid \u0026ldquo;Fix product page\u0026rdquo; or \u0026ldquo;Category page improvement\u0026rdquo;). Then, just fill the PR template table to answer some questions which will help the team make a decision faster.\nPlease note that all the pull requests must follow those guidelines. If the commit messages are not well-formatted, the pull request\u0026rsquo;s title is not correct, or the table is not properly filled, we will not be able to accept your pull request.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/database/dbquery/",
	"title": "DBQuery class",
	"tags": [],
	"description": "",
	"content": " The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:\n$sql = new DbQuery(); $sql-\u0026gt;select('*'); $sql-\u0026gt;from('cms', 'c'); $sql-\u0026gt;innerJoin('cms_lang', 'l', 'c.id_cms = l.id_cms AND l.id_lang = '.(int)$id_lang); $sql-\u0026gt;where('c.active = 1'); $sql-\u0026gt;orderBy('position'); return Db::getInstance()-\u0026gt;executeS($sql);  Main methods  __toString()  Generate and get the query.  build()  Generate and get the query (return a string).  from(string $table, mixed $alias = null)  Set table for FROM clause.  groupBy(string $fields)  Add a GROUP BY restriction.  having(string $restriction)  Add a restriction in the HAVING clause (each restriction will be separated by an AND statement).  innerJoin(string $table, string $alias = null, string $on = null)  Add a INNER JOIN clause\nE.g. $this-\u0026gt;innerJoin('product p ON ...').  join(string $join)  Add a JOIN clause\nE.g. $this-\u0026gt;join('RIGHT JOIN'.DB_PREFIX.'produc t p ON ...');.  leftJoin(string $table, string $alias = null, string $on = null)  Add a LEFT JOIN clause.  leftOuterJoin(string $table, string $alias = null, string $on = null)  Add a LEFT OUTER JOIN clause. limit(string $limit, mixed $offset = 0)  Limit results in query.  naturalJoin(string $table, string $alias = null)  Add a NATURAL JOIN clause.  orderBy(string $fields)  Add an ORDER BY restriction.  select(string $fields)  Add fields in query selection.  where(string $restriction)  Add a restriction in WHERE clause (each restriction will be separated by an AND statement).   "
},
{
	"uri": "http://devdocs.prestashop.com/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " PrestaShop Developer Documentation PrestaShop is a free and Open Source e-commerce web platform, committed to providing the best shopping cart experience for both merchants and customers. It is written in PHP, is highly customizable, supports all the major payment services, is translated in many languages and localized for many countries, has a fully responsive design (both front and back office), and more! Learn more about PrestaShop.\nThis site covers the technical aspects of PrestaShop and it\u0026rsquo;s tailored for theme, module and core developers.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/migration_from_16/",
	"title": "Migrating from PrestaShop 1.6",
	"tags": [],
	"description": "",
	"content": " Migrating from PrestaShop 1.6 PrestaShop 1.7 introduces a totally reworked theme system from version 1.6, with the goal of making PrestaShop upgrades easier, and making it easier and faster to create a brand new theme.\nThe huge change to the theme system means that there is no easy way to migrate your PrestaShop 1.6 theme to PrestaShop 1.7.\nWhen using the automatic upgrade from PrestaShop 1.6 to 1.7, your theme will be switched to the new default theme, called \u0026ldquo;Classic\u0026rdquo;. We therefore recommend working on your 1.7 theme before you make the switch to PrestaShop 1.7.\nSome features have been dropped with PrestaShop 1.7. They were either already deprecated in 1.6, or proved too problematic to maintain.\n"
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/database/objectmodel/",
	"title": "ObjectModel class",
	"tags": [],
	"description": "",
	"content": " The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop’s object model. It can be overridden… with precaution.\nIt is an Active Record kind of class (see: http://en.wikipedia.org/wiki/Active_record_pattern). The table attributes or view attributes of PrestaShop’s database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database. Each object retrieves its data from the database; when an object is updated, the record to which it is tied is updated as well. The class implements accessors for each attribute.\nDefining the model You must use the $definition static variable in order to define the model.\nFor instance:\n/** * Example from the CMS model (CMSCore) */ public static $definition = array( 'table' =\u0026gt; 'cms', 'primary' =\u0026gt; 'id_cms', 'multilang' =\u0026gt; true, 'fields' =\u0026gt; array( 'id_cms_category' =\u0026gt; array('type' =\u0026gt; self::TYPE_INT, 'validate' =\u0026gt; 'isUnsignedInt'), 'position' =\u0026gt; array('type' =\u0026gt; self::TYPE_INT), 'active' =\u0026gt; array('type' =\u0026gt; self::TYPE_BOOL), // Language fields 'meta_description' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255), 'meta_keywords' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255), 'meta_title' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'required' =\u0026gt; true, 'size' =\u0026gt; 128), 'link_rewrite' =\u0026gt; array('type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isLinkRewrite', 'required' =\u0026gt; true, 'size' =\u0026gt; 128), 'content' =\u0026gt; array('type' =\u0026gt; self::TYPE_HTML, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isString', 'size' =\u0026gt; 3999999999999), ), );  Multiple stores and/or languages In order to retrieve an object in many languages:\n'multilang' =\u0026gt; true  In order to retrieve an object depending on the current store:\n'multishop' =\u0026gt; true  In order to retrieve an object which depends on the current store, and in many languages:\n'multilang_shop' =\u0026gt; true  Main methods  __construct($id = NULL, $id_lang = NULL)  Build object.  add($autodate = true, $nullValues = false)  Save current object to database (add or update). associateTo(integer|array $id_shops)\n  Associate an item to its context. delete()  Delete current object from database. deleteImage(mixed $force_delete = false)\n  Delete images associated with the object. deleteSelection($selection)  Delete several objects from database. getFields()  Prepare fields for ObjectModel class (add, update). getValidationRules($className = _CLASS_)  Return object validation rules (field validity). save($nullValues = false, $autodate = true)  Save current object to database (add or update). toggleStatus()  Toggle object\u0026rsquo;s status in database. update($nullValues = false)  Update current object to database. validateFields($die = true, $errorReturn = false)  Check for field validity before database interaction.   "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/rtl/",
	"title": "RTL support",
	"tags": [],
	"description": "",
	"content": " RTL support PrestaShop supports RTL (Right-to-left) themes natively.\nRTL stylesheets There are two ways of customizing your theme for RTL: either by adding an override file that is only loaded for RTL languages, or by using completely different version of the theme\u0026rsquo;s stylesheets.\nCSS override file PrestaShop will try to load a css file named rtl.css after your theme\u0026rsquo;s ones when displayed in an RTL language. You can use this file to place any style override you need for RTL.\nRTL version  When the shop is displayed in an RTL language, PrestaShop will automatically try and load RTL versions of the theme\u0026rsquo;s stylesheets if they are available, instead of the \u0026ldquo;normal\u0026rdquo; ones.\nRTL versions are automatically \u0026ldquo;discovered\u0026rdquo; by PrestaShop using a simple convention: to obtain the RTL version name, you just need to add _rtl to the end of the standard file name.\nExample:\n   Original name RTL version name     theme.css theme_rtl.css   theme-custom.css theme-custom_rtl.css    Stylesheet generation  PrestaShop can also automagically generate an RTL version of your theme\u0026rsquo;s stylesheets based on the original CSS files.\nFollow this steps to generate RTL stylesheets for your theme:\n Open your shop\u0026rsquo;s Back Office. Go to the \u0026ldquo;Design \u0026gt; Theme \u0026amp; Logo\u0026rdquo; page. Scroll down to the \u0026ldquo;Adaptation to right-to-left languages\u0026rdquo; section.\nNote: this is only visible if you have an RTL language installed on your shop. Choose the theme you want to generate stylesheets for. Toggle \u0026ldquo;Generate RTL stylesheet\u0026rdquo; to \u0026ldquo;Yes\u0026rdquo;. Press \u0026ldquo;Save\u0026rdquo;.   RTL generation in the back office   This process will generate _rtl.css files for every .css file in the theme.\nPrestaShop won\u0026rsquo;t generate a file if one with the same name already exists.\nIf you want to regenerate a file, you have to delete it first.\n Polishing it up Sometimes the automatic transformation won\u0026rsquo;t be enough to get your theme exactly how you want it.\nYou should never modify generated _rtl.css files – they are generated automatically by PrestaShop.\nIf you need to add some specific css to fix your RTL transformed files, use .rtlfix files. The content of those files is appended to the RTL version of that file after it\u0026rsquo;s transformed.\nThis is what PrestaShop does for each .css file in the theme:\n Take a file (let\u0026rsquo;s say it\u0026rsquo;s called my-file.css) If my-file_rtl.css exists, move on to the next file. Transform my-file.css to RTL and save its contents to my-file_rtl.css If a file named my-file.rtlfix exists, append its contents to my-file_rtl.css.  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/themes/getting_started/setting_up_your_local_environment/",
	"title": "Setting up your local environment",
	"tags": [],
	"description": "",
	"content": " Setting up your local environment Now that you intend to building a theme for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your files on your online server in order to test your changes. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Having a local environment is the essential first step in the path of web development.\nThe following content assumes you’re a developer and you want to create a theme or a module.\n Installing PrestaShop We advise you to install PrestaShop using Git and Composer.\nOpen a command line on your (empty) working directory, then:\n Clone PrestaShop\ngit clone https://github.com/PrestaShop/PrestaShop.git  Install dependencies\ncomposer install   Using git you can choose your PrestaShop version:\ngit checkout 1.7.2.0  Also we would warn you to test your final result with a zip release, just for safety (since vendor version might be slightly different).\nIf you haven’t done it yet, we strongly recommend you to read our article Set Up Your Git For Contributing\n Building your .gitignore file A gitignore file is a must-have for any Git-versioned project, as it specifies intentionally untracked files that Git should ignore.\nWhat to ignore Generally, you shouldn’t version the following types of files:\n Temporary files (such as cache files) Generated files (such as minified CSS or retrieved XML files) Files with credentials or personal information (such as settings.inc.php) OS and IDE-related files (such as .DS_Store or .idea/) assets/css/* assets/js/* node_modules/  We suggest that you build your own using http://gitignore.io.\nIf you are building a full project for a client, you can read our article on building a gitignore for PrestaShop.\n Create your theme from the Starter Theme When you want to create a theme, the best way is to use the Starter Theme as a base theme.\nCreate a new folder under themes/, download the Starter Theme, and copy its files in your new folder.\nDownload the Starter Theme\nCreate your theme.yml file First of all, you need to rename config/theme.dist.yml to config/theme.yml and edit it according to the name of your theme.\nname: YOUR_THEME_DIRECTORY_NAME display_name: YOUR THEME NAME version: 1.0.0 author: name: \u0026quot;PrestaShop Team\u0026quot; email: \u0026quot;pub@prestashop.com\u0026quot; url: \u0026quot;http://www.prestashop.com\u0026quot; meta: compatibility: from: 1.7.3.0 to: ~  "
},
{
	"uri": "http://devdocs.prestashop.com/1.7/documentation/shortcodes/",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": " Shortcodes Hugo provides some nice features that extend Markdown: shortcodes.\nSome default shortcodes are provided by Hugo (You can read more about them on the Shortcodes documentation. ), but some are custom-made for this theme, so read on.\nQuick reference Here are the most useful shortcodes:\nCross links To link to another page in the documentation, use ref:\n[This is a link to Configuration]({{\u0026lt; ref \u0026quot;1.7/basics/configuration.md\u0026quot; \u0026gt;}})  Rendered code:\nThis is a link to Configuration\nDon\u0026rsquo;t forget to put the link between double quotes.\n Internal links To a link that points to a specific point in the current page, use relref:\n[This is a link to Shortcodes]({{\u0026lt; ref \u0026quot;#extended-features-shortcodes\u0026quot; \u0026gt;}})  Rendered code:\nThis is a link to Shortcodes\nInternal links need to be \u0026ldquo;slugified\u0026rdquo; to work.\nIf you feel lost, here\u0026rsquo;s a tool that will slugify your titles.\n Notes / tip block You can add notice blocks to make some information stand out:\nNote {{% notice note %}} This is something you may want to know. {{% /notice %}}  Renders to:\nThis is something you may want to know.\n Tip {{% notice tip %}} Everything will be fine, trust me. {{% /notice %}}  Renders to:\nEverything will be fine, trust me.\n Info {{% notice info %}} This is pretty important, you should pay attention. {{% /notice %}}  Renders to:\nThis is pretty important, you should pay attention.\n Warning {{% notice warning %}} Watch out, danger zone! {{% /notice %}}  Renders to:\nWatch out, danger zone!\n "
},
{
	"uri": "http://devdocs.prestashop.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://devdocs.prestashop.com/1.7/development/prestashop_architecture/",
	"title": "The PrestaShop architecture",
	"tags": [],
	"description": "",
	"content": " The PrestaShop architecture The PrestaShop developers have done their best to clearly and intuitively separate the various parts of the software.\nHere is how the files are organized:\n /admin (the name is customized on installation): contains all the PrestaShop files pertaining to the back office. When accessing this folder with your browser, you will be asked to provide proper identification, for security reasons. Important: you should make sure to protect that folder with a .htaccess or .htpasswd file! /app: NEW IN 1.7. /cache: contains temporary folders that are generated and re-used in order to alleviate the server\u0026rsquo;s load. /classes: contains all the files pertaining to PrestaShop\u0026rsquo;s object model (some are used for the front office, others for the back office). Each file represents (and contains) a PHP class, and its methods/properties. /config: contains all of PrestaShop\u0026rsquo;s configuration files. Unless asked to, you should never edit them, as they are directly handled by PrestaShop\u0026rsquo;s installer and back office. /controllers: contains all the files pertaining to PrestaShop controllers – as in Model-View-Controller (or MVC), the software architecture used by PrestaShop. Each file controls a specific part of PrestaShop. /docs: contains some documentation, the licenses, and the sample import files. Note: it should be deleted in a production environment. `/download: contains your virtual products, which can be downloaded by the user who paid for it. Files are stored with a md5 filename. /img: contains all of PrestaShop\u0026rsquo;s default images, icons and picture files – that is, those that do not belong to the theme. This is where you can find the pictures for product categories (/c sub-folder), those for the products (/p sub-folder), and those for the back office itself (/admin sub-folder). /install: contains all the files related to PrestaShop\u0026rsquo;s installer. You will be required to delete it after installation, in order to increase security. /js: contains all JavaScript files that are not attached to themes. Most of them belong to the back office. This is also where you will find the jQuery framework. /localization: contains all of PrestaShop\u0026rsquo;s localization files – that is, files that contain local information, such as currency, language, tax rules and tax rule groups, states and the various units in use in the chosen country (i.e., volume in liter, weight in kilograms, etc.). /mails: contains all HTML and text files related to e-mails sent by PrestaShop. Each language has its specific folder, where you can manually edit their content if you wish. PrestaShop contains a tool to edit your e-mails, located in the back office, in the Localization \u0026gt; Translation page. /modules: contains all of PrestaShop\u0026rsquo;s modules, each in its own folder. If you wish to definitely remove a module, first uninstall it from the back office, then only should you delete its folder. /override: this is a special folder that appeared with PrestaShop 1.4. By using PrestaShop\u0026rsquo;s regular folder/filename convention, it is possible to create files that override PrestaShop\u0026rsquo;s default classes or controllers. This enables you to change PrestaShop core behavior without touching to the original files, keeping them safe for the next update. Note: overrides are not recommended for modules that you intend to distribute/sell, and are strictly forbidden in partner modules. Keep them for your own shop. /pdf: contains all the template files (.tpl) pertaining to the PDF file generation (invoice, delivery slips, etc.). Change these files in order to change the look of the PDF files that PrestaShop generates. /src: NEW IN 1.7. Contains the architecture files, comprising the Symfony framework, the legacy framework, and the Adapter classes. /tests: NEW IN 1.7. Contains automated tests. This folder is not part of the public archive. /themes: contains all the currently-installed themes, each in its own folder. /tools: contains external tools that were integrated into PrestaShop. For instance, this were you\u0026rsquo;ll find Smarty (template engine), TCPDF (PDF file generator), Swift (mail sender), PEAR XML Parser (PHP tool), etc. /translations: contains a sub-folder for each available language. However, if you wish to change the translation, you must do so using the PrestaShop internal tool, and not edit them directly in this folder. /travis-scripts: NEW IN 1.7. Contains Travis-speficic scripts. This folder is not part of the public archive. /upload: contains the files that would be uploaded by clients for customizable products (for instance, a picture that a client wants printed on a mug). vendor: NEW IN 1.7. Contains various 3rd-party tools and frameworks that are used by PrestaShop, such as Composer, cURL, Doctrine, etc. web: NEW IN 1.7. Contains various web-server-specific files, such as favicon.ico or robots.txt. This folder is not part of the public archive. /webservice: contains files that enable third-party applications to access PrestaShop through its API.  Root folders that were removed between 1.6 and 1.7:\n /css: contained all the CSS files that are not attached to themes – hence, these were mostly used by the PrestaShop back office, and have now been moved to the theme.css file in the /admin/themes/new-theme/public folder. /log: contains the log files generated by PrestaShop at various stages, for instance during the installation process.  "
}]